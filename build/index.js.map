{
  "version": 3,
  "sources": ["../app/entry.server.tsx", "../app/root.tsx", "../app/routes/dashboard.enter_data.$formId.tsx", "../app/api/instance.ts", "../app/api/users.ts", "../app/api/db.ts", "../app/api/doc.ts", "../app/api/index.ts", "../app/ui/elements/custom_button.tsx", "../app/ui/elements/custom_input.tsx", "../app/ui/elements/custom_select.tsx", "../app/widgets/field.tsx", "../app/widgets/single_group.tsx", "../app/widgets/multy_group.tsx", "../app/widgets/rec_navigator.tsx", "../app/routes/dashboard.db_struct.tsx", "../app/ui/forms/dict_form.tsx", "../app/ui/forms/group_form.tsx", "../app/ui/forms/input_form.tsx", "../app/ui/forms/search_form.tsx", "../app/ui/panels/db_struct.tsx", "../app/routes/dashboard.users.tsx", "../app/ui/dialogs/user_dialog.tsx", "../app/routes/dashboard.tsx", "../app/routes/_index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` \u2728\n * For more information, see https://remix.run/file-conventions/entry.server\n */\n\nimport { PassThrough } from \"node:stream\";\n\nimport type { AppLoadContext, EntryContext } from \"@remix-run/node\";\nimport { createReadableStreamFromReadable } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { isbot } from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n  // This is ignored so we can keep it in the template for visibility.  Feel\n  // free to delete this parameter in your app if you're not using it!\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  loadContext: AppLoadContext\n) {\n  return isbot(request.headers.get(\"user-agent\") || \"\")\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import type { LinksFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration } from\n\"@remix-run/react\";\n\nimport stylesheet from \"~/tailwind.css\";\n\nexport const links: LinksFunction = () => [\n{ rel: \"stylesheet\", href: stylesheet }];\n\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"bg-blue-gray-50\">\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>);\n\n}", "import MaterialTailwind from \"@material-tailwind/react\"\nconst { Spinner, Alert, Dialog, Card, CardBody, CardFooter } = MaterialTailwind\nimport { InputField, Prisma } from \"@prisma/client\"\nimport { ActionFunctionArgs, LoaderFunctionArgs, json, redirect } from \"@remix-run/node\"\nimport { Form, useActionData, useFetcher, useLoaderData, useLocation, useNavigate, useNavigation, useOutletContext, useSubmit } from \"@remix-run/react\"\nimport { useEffect, useRef, useState } from \"react\"\nimport api from '~/api'\nimport CustomButton from \"~/ui/elements/custom_button\"\nimport { ContexType } from \"./dashboard\"\nimport SingleGroup from \"~/widgets/single_group\"\nimport MultyGroup from \"~/widgets/multy_group\"\nimport RecNavigator from \"~/widgets/rec_navigator\"\n\nexport async function loader({\n    request,\n    params,\n}: LoaderFunctionArgs) {\n    const url = new URL(request.url)\n    const docId = url.searchParams.get(\"docId\")\n    const state = url.searchParams.get(\"state\")\n    let inputForm: any | undefined\n    let doc: any\n    inputForm = await api.db.getInputForm(Number(params.formId))\n    doc = await api.doc.getDoc(docId ? Number(docId) : null, inputForm)\n    return json({ inputForm, doc, state })\n}\n\nexport async function action({\n    request,\n}: ActionFunctionArgs) {\n    let ok: boolean = false\n    let errors: string = ''\n    let docs: { formId?: number, ids?: number[] } | null = null\n    let deletedDocId: number | null = null\n    const formData = await request.formData()\n    const {\n        _action,\n        _user,\n        _inputFormId,\n        _id,\n        ...values\n    } = Object.fromEntries(formData)\n    try {\n        const inputForm = await api.db.getInputForm(Number(_inputFormId))\n\n        if (_action === 'openForCreate') {\n            return redirect(`/dashboard/enter_data/${_inputFormId}?state=edit`)\n        }\n        else if (_action === 'openForEdit') {\n            return redirect(`/dashboard/enter_data/${_inputFormId}?state=edit&docId=${_id}`)\n        }\n        else if (_action === 'openForSearch') {\n            return redirect(`/dashboard/enter_data/${_inputFormId}?state=search`)\n        }\n        else if (_action === 'saveDocument') {\n            let jsonData = JSON.parse(String(values.json))\n            if (_id) {\n                await api.doc.updateDoc(Number(_user), inputForm, jsonData)\n                return redirect(`/dashboard/enter_data/${_inputFormId}?docId=${_id}`)\n            } else {\n                await api.doc.createDoc(Number(_user), inputForm, jsonData)\n                return redirect(`/dashboard/enter_data/${_inputFormId}?`)\n            }\n        }\n        else if (_action === 'findDocument') {\n            let jsonData = JSON.parse(String(values.json))\n            const results: { id: number }[] | [] = await api.doc.findDoc(inputForm, jsonData)\n            if (results.length > 100) {\n                errors = \"Find records more 100\"\n            } else {\n                docs = {\n                    formId: inputForm.id,\n                    ids: results.map((item: any) => item.id)\n                }\n                ok = true\n            }\n        }\n        else if (_action === 'cancelUpdate') {\n            if (_id) {\n                return redirect(`/dashboard/enter_data/${_inputFormId}?docId=${_id}`)\n            } else {\n                return redirect(`/dashboard/enter_data/${_inputFormId}?`)\n            }\n        }\n        else if (_action === 'deleteDocument') {\n            if (_id) {\n                await api.doc.deleteDoc(Number(_id))\n                deletedDocId = (Number(_id))\n                ok = true\n            }\n        }\n    } catch (e) {\n        if (e instanceof Prisma.PrismaClientKnownRequestError) {\n            errors = e.message\n        } else {\n            throw e\n        }\n    }\n\n    return json({ errors, docs, deletedDocId, ok })\n}\n\nexport default function InputForms() {\n    const { dictionaries, docs, setDocs, current, setCurrent } = useOutletContext<ContexType>()\n    const { inputForm, doc, state } = useLoaderData<typeof loader>()\n    const [document, setDocument] = useState<typeof doc>(doc)\n    const location = useLocation()\n    const navigation = useNavigation()\n    const navigate = useNavigate()\n    const formRef = useRef<HTMLFormElement>(null)\n    const userId = 19;\n    const [open, setOpen] = useState(false)\n    const data = useActionData<typeof action>()\n    const [showFind, setShowFind] = useState(false)\n    const fetcher = useFetcher()\n    const isDeleting = fetcher.state !== \"idle\"\n    const submit = useSubmit()\n\n    useEffect(() => {\n        setDocument(doc)\n        console.log(\"useEffect\")\n    }, [doc])\n\n    const handleSave = () => {\n        submit({\n            _action: \"saveDocument\",\n            _user: userId ? userId : '',\n            _inputFormId: inputForm.id ? inputForm.id : '',\n            _id: document.id ? document.id : '',\n            json: JSON.stringify(document)\n        }, {\n            method: \"post\",\n        })\n    }\n\n    const handleFind = () => {\n        submit({\n            _action: \"findDocument\",\n            _user: userId ? userId : '',\n            _inputFormId: inputForm.id ? inputForm.id : '',\n            _id: document.id ? document.id : '',\n            json: JSON.stringify(document)\n        }, {\n            method: \"post\",\n        })\n    }\n\n    const handleOpenInputForm = () => {\n        setShowFind(false)\n        if (docs && docs.ids?.length) {\n            navigate(`/dashboard/enter_data/${docs.formId}?docId=${docs.ids[0]}`)\n        } else {\n            navigate(`/dashboard/enter_data/${docs.formId}?state=search`)\n        }\n    }\n\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            \"Please confirm you want to delete this record.\"\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    useEffect(() => {\n        if (data?.errors) {\n            setOpen(true)\n        }\n        if (data?.docs && data?.ok) {\n            setDocs(data.docs)\n            setShowFind(true)\n        }\n        if (navigation.state === \"idle\" && data?.ok) {\n            formRef.current?.reset()\n        }\n        if (data?.deletedDocId && data?.ok) {\n            setDocs(prev => ({ formId: prev.formId, ids: prev.ids?.filter(item => item !== data.deletedDocId) }))\n        }\n    }, [data])\n\n    return (\n        <div className=\"container mx-auto flex flex-col gap-3 h-screen pb-5\">\n            <Dialog\n                placeholder=\"\"\n                size=\"sm\"\n                open={showFind}\n                handler={() => handleOpenInputForm()}\n                className=\"bg-transparent shadow-none\"\n            >\n                <Card className=\"mx-auto w-full\" placeholder=\"\">\n                    <CardBody className=\"flex flex-col gap-4 overflow-auto\" placeholder=\"\">\n                        <div className=\"text-bold p-1\">Find: {docs.ids?.length}</div>\n                    </CardBody>\n                    <CardFooter className=\"pt-0 flex flex-row gap-3\" placeholder=\"\">\n                        <CustomButton\n                            className=\"bg-green-500 hover:shadow-green-100\"\n                            onClick={() => handleOpenInputForm()}\n                        >\n                            OK\n                        </CustomButton>\n                    </CardFooter>\n                </Card>\n            </Dialog>\n            <h1 className=\"self-center text-amber-700 text-3xl font-bold mt-4\">{inputForm?.title}</h1>\n            <Alert className=\"text-white bg-red-500\" open={open} onClose={() => setOpen(false)}>\n                {data?.errors ? data.errors : \"\"}\n            </Alert>\n            <RecNavigator docs={docs} current={current} setCurrent={setCurrent} />\n            <div\n                className=\"flex items-center gap-3\"\n            >\n                {!['edit', 'search'].includes(String(state))\n                    ? <Form method=\"post\">\n                        <input type=\"hidden\" name=\"_user\" value={userId} />\n                        <input type=\"hidden\" name=\"_inputFormId\" value={inputForm.id} />\n                        <CustomButton\n                            className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                            type=\"submit\"\n                            name=\"_action\"\n                            value=\"openForCreate\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                            </svg>\n                            Create\n                        </CustomButton>\n                    </Form>\n                    : null}\n                {!['edit', 'search'].includes(String(state))\n                    ? <Form method=\"post\">\n                        <input type=\"hidden\" name=\"_user\" value={userId} />\n                        <input type=\"hidden\" name=\"_inputFormId\" value={inputForm.id} />\n                        <CustomButton\n                            className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                            type=\"submit\"\n                            name=\"_action\"\n                            value=\"openForSearch\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z\" />\n                            </svg>\n                            Search\n                        </CustomButton>\n                    </Form>\n                    : null}\n                {state === \"search\"\n                    ? <CustomButton\n                        className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                        // form=\"documentForm\"\n                        // type=\"submit\"\n                        // name=\"_action\"\n                        // value=\"findDocument\"\n                        onClick={() => handleFind()}\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z\" />\n                        </svg>\n                        Find\n                    </CustomButton>\n                    : null}\n                {doc.id && state !== 'edit'\n                    ? <Form method=\"post\">\n                        <input type=\"hidden\" name=\"_user\" value={userId} />\n                        <input type=\"hidden\" name=\"_inputFormId\" value={inputForm.id} />\n                        <input type=\"hidden\" name=\"_id\" value={doc.id ? doc.id : ''} />\n                        <CustomButton\n                            className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                            type=\"submit\"\n                            name=\"_action\"\n                            value=\"openForEdit\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125\" />\n                            </svg>\n                            Edit\n                        </CustomButton>\n                    </Form>\n                    : null}\n                {state === 'edit'\n                    ? <CustomButton\n                        className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                        // form=\"documentForm\"\n                        // type=\"submit\"\n                        // name=\"_action\"\n                        // value=\"saveDocument\"\n                        onClick={() => handleSave()}\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 5.25 7.5 7.5 7.5-7.5m-15 6 7.5 7.5 7.5-7.5\" />\n                        </svg>\n                        Save\n                    </CustomButton>\n                    : null}\n                {state === 'edit' || state === 'search'\n                    ? <Form method=\"post\">\n                        <input type=\"hidden\" name=\"_user\" value={userId} />\n                        <input type=\"hidden\" name=\"_inputFormId\" value={inputForm.id} />\n                        <input type=\"hidden\" name=\"_id\" value={doc.id ? doc.id : ''} />\n                        <CustomButton\n                            className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                            type=\"submit\"\n                            name=\"_action\"\n                            value=\"cancelUpdate\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                            </svg>\n\n                            Cancel\n                        </CustomButton>\n                    </Form>\n                    : null}\n                {doc.id && state !== 'edit'\n                    ? <Form method=\"post\">\n                        <input type=\"hidden\" name=\"_user\" value={userId} />\n                        <input type=\"hidden\" name=\"_inputFormId\" value={inputForm.id} />\n                        <input type=\"hidden\" name=\"_id\" value={doc.id ? doc.id : ''} />\n                        <CustomButton\n                            className=\"bg-red-500 hover:shadow-red-100\"\n                            disabled={isDeleting}\n                            onClick={handleDelete}\n                            type=\"submit\"\n                            name=\"_action\"\n                            value=\"deleteDocument\"\n                        >\n                            {isDeleting\n                                ? <>\n                                    <Spinner className=\"w-4 h-4\" />\n                                    Deleting...\n                                </>\n                                : <>\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                                    </svg>\n                                    Delete\n                                </>}\n                        </CustomButton>\n                    </Form>\n                    : null}\n            </div>\n            <div className=\"bg-white border p-1 shadow-blue-gray-700 shadow-md overflow-auto\">\n                <Form\n                    key={location.key}\n                    id=\"documentForm\"\n                    method=\"post\"\n                    ref={formRef}\n                >\n                    <input type=\"hidden\" name=\"_user\" value={userId} />\n                    <input type=\"hidden\" name=\"_inputFormId\" value={inputForm.id} />\n                    <input type=\"hidden\" name=\"_id\" value={doc.id ? doc.id : ''} />\n                    {inputForm?.groups && inputForm.groups.map((group: any) => (\n                        <div key={group.id} className=\"mb-2\">\n                            <h2 className=\"col-span-3 bg-orange-700 text-white font-bold text-sm p-1 pl-4\">{group.title}</h2>\n                            {!group.isMulty\n                                ? <SingleGroup\n                                    state={state}\n                                    dictionaries={dictionaries}\n                                    group={group}\n                                    doc={document}\n                                    setDoc={setDocument}\n                                />\n                                : <MultyGroup\n                                    state={state}\n                                    dictionaries={dictionaries}\n                                    group={group}\n                                    doc={document}\n                                    setDoc={setDocument}\n                                />}\n                        </div>\n                    ))}\n                </Form>\n            </div>\n        </div>\n    )\n}", "import { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport default prisma", "import { User } from \"@prisma/client\"\nimport { PrismaClient } from \"@prisma/client/extension\"\nimport bcrypt from 'bcryptjs'\n\nexport default function UsersModule(prisma: PrismaClient) {\n    return {\n        getDepartments() {\n            return prisma.department.findMany()\n        },\n        getRoles() {\n            return prisma.role.findMany()\n        },\n        getUsers(q: string | null = null) {\n            if (!q) {\n                return prisma.user.findMany({\n                    include: {\n                        roles: true\n                    },\n                    orderBy: {\n                        login: 'asc',\n                    }\n                })\n            } else {\n                return prisma.user.findMany({\n                    include: {\n                        roles: true\n                    },\n                    where: {\n                        login: {\n                            startsWith: q\n                        }\n                    },\n                    orderBy: {\n                        login: 'asc',\n                    }\n                })\n            }\n        },\n        createUser(user: User) {\n            return prisma.user.create({\n                data: {\n                    ...user,\n                    id: undefined,\n                    password: bcrypt.hashSync(user.password),\n                    createdAt: undefined,\n                    updatedAt: undefined\n                }\n            })\n        },\n        updateUser(userId: number, user: User) {\n            if (!user.password) {\n                return prisma.user.update({\n                    where: {\n                        id: userId\n                    },\n                    data: {\n                        ...user,\n                        id: undefined,\n                        password: bcrypt.hashSync(user.password),\n                        createdAt: undefined,\n                        updatedAt: undefined\n                    }\n                })\n            } else {\n                return prisma.user.update({\n                    where: {\n                        id: userId\n                    },\n                    data: {\n                        ...user,\n                        id: undefined,\n                        password: undefined,\n                        createdAt: undefined,\n                        updatedAt: undefined\n                    }\n                })\n            }\n        },\n        getUser(userId: number) {\n            return prisma.user.findFirst({\n                where: {\n                    id: userId\n                }\n            })\n        },\n        deleteUser(userId: number) {\n            return prisma.user.delete({\n                where: {\n                    id: userId\n                }\n            })\n        }\n    }\n}", "import { Dictionary, InputForm, SearchForm, Group, InputField, SearchField } from \"@prisma/client\"\nimport { PrismaClient } from \"@prisma/client/extension\";\nimport { IDict } from \"~/types/types\";\n\nexport default function DbModule(prisma: PrismaClient) {\n    return {\n        async getDictionaries() {\n            let dicts: IDict[] = []\n            const dictionaries = await prisma.dictionary.findMany({\n                orderBy: {\n                    title: 'asc'\n                }\n            })\n            for (const dict of dictionaries) {\n                try {\n                    const [dic1, dic2] = await prisma.$transaction([\n                        prisma.$queryRawUnsafe(`SELECT * FROM dic_${dict.id}`),\n                        prisma.$queryRawUnsafe(`SELECT * FROM dic_${dict.id} WHERE is_enabled = true`)\n                    ])\n                    dicts.push({\n                        id: dict.id,\n                        title: dict.title,\n                        data_browse: dic1,\n                        data_edit: dic2\n                    })\n                } catch (e) {\n                    dicts.push({\n                        id: dict.id,\n                        title: dict.title,\n                        data_browse: [],\n                        data_edit: []\n                    })\n                }\n            }\n            return dicts\n        },\n        createEmptyDictionary(cnt: number) {\n            return prisma.dictionary.create({\n                data: {\n                    title: `Dictionary ${cnt}`,\n                }\n            })\n        },\n        updateDictionary(formId: number, form: Dictionary) {\n            return prisma.dictionary.update({\n                where: {\n                    id: formId\n                },\n                data: {\n                    ...form,\n                    id: undefined\n                }\n            })\n        },\n        getDictionary(formId: number) {\n            return prisma.dictionary.findFirst({\n                where: {\n                    id: formId\n                }\n            })\n        },\n        deleteDictionary(formId: number) {\n            return prisma.dictionary.delete({\n                where: {\n                    id: formId\n                }\n            })\n        },\n        getInputForms() {\n            return prisma.inputForm.findMany({\n                include: {\n                    groups: true,\n                },\n                orderBy: {\n                    pos: 'asc'\n                }\n            })\n        },\n        createEmptyInputForm(cnt: number) {\n            return prisma.inputForm.create({\n                data: {\n                    pos: cnt,\n                    title: `Input Form ${cnt}`,\n                }\n            })\n        },\n        updateInputForm(formId: number, form: InputForm) {\n            return prisma.inputForm.update({\n                where: {\n                    id: formId\n                },\n                data: {\n                    ...form,\n                    id: undefined\n                }\n            })\n        },\n        getInputForm(formId: number) {\n            return prisma.inputForm.findFirst({\n                where: {\n                    id: formId\n                },\n                include: {\n                    groups: {\n                        orderBy: {\n                            pos: 'asc'\n                        },\n                        include: {\n                            fields: {\n                                orderBy: {\n                                    pos: 'asc'\n                                }\n                            }\n                        }\n                    }\n                }\n            })\n        },\n        deleteInputForm(formId: number) {\n            return prisma.inputForm.delete({\n                where: {\n                    id: formId\n                }\n            })\n        },\n        getSearchForms() {\n            return prisma.searchForm.findMany({\n                include: {\n                    fields: true,\n                },\n                orderBy: {\n                    pos: 'asc'\n                }\n            })\n        },\n        createEmptySearchForm(cnt: number) {\n            return prisma.searchForm.create({\n                data: {\n                    pos: cnt,\n                    title: `Search Form ${cnt}`,\n                }\n            })\n        },\n        updateSearchForm(formId: number, form: SearchForm) {\n            return prisma.searchForm.update({\n                where: {\n                    id: formId\n                },\n                data: {\n                    ...form,\n                    id: undefined\n                }\n            })\n        },\n        getSearchForm(formId: number) {\n            return prisma.searchForm.findFirst({\n                include: {\n                    fields: {\n                        orderBy: {\n                            pos: 'asc'\n                        }\n                    }\n                },\n                where: {\n                    id: formId\n                },\n                orderBy: {\n                    pos: 'asc'\n                }\n            })\n        },\n        deleteSearchForm(formId: number) {\n            return prisma.searchForm.delete({\n                where: {\n                    id: formId\n                }\n            })\n        },\n        getGroups(formId: number | null) {\n            if (!formId) return []\n            return prisma.group.findMany({\n                where: {\n                    inputFormId: formId\n                },\n                include: {\n                    fields: true\n                },\n                orderBy: {\n                    pos: 'asc'\n                }\n            })\n        },\n        createEmptyGroup(formId: number, cnt: number) {\n            return prisma.group.create({\n                data: {\n                    pos: cnt,\n                    inputFormId: formId,\n                    title: `Group ${cnt}`,\n                }\n            })\n        },\n        getGroup(groupId: number) {\n            return prisma.group.findFirst({\n                include: {\n                    fields: {\n                        orderBy: {\n                            pos: 'asc'\n                        }\n                    }\n                },\n                where: {\n                    id: groupId\n                },\n                orderBy: {\n                    pos: 'asc',\n                }\n            })\n        },\n        updateGroup(groupId: number, group: Group) {\n            return prisma.group.update({\n                where: {\n                    id: groupId\n                },\n                data: {\n                    ...group,\n                    id: undefined,\n                }\n            })\n        },\n        deleteGroup(groupId: number) {\n            return prisma.group.delete({\n                where: {\n                    id: groupId\n                }\n            })\n        },\n        createEmptySearchField(formId: number, cnt: number) {\n            return prisma.searchField.create({\n                data: {\n                    pos: cnt,\n                    searchFormId: formId,\n                    title: `Search Field ${cnt}`,\n                }\n            })\n        },\n        getSearchField(fieldId: number) {\n            return prisma.searchField.findFirst({\n                where: {\n                    id: fieldId\n                }\n            })\n        },\n        updateSearchField(fieldId: number, searchField: SearchField) {\n            return prisma.searchField.update({\n                where: {\n                    id: fieldId\n                },\n                data: {\n                    ...searchField,\n                    id: undefined\n                }\n            })\n        },\n        deleteSearchField(fieldId: number) {\n            return prisma.searchField.delete({\n                where: {\n                    id: fieldId\n                }\n            })\n        },\n        createEmptyInputField(groupId: number, cnt: number) {\n            return prisma.inputField.create({\n                data: {\n                    pos: cnt,\n                    groupId: groupId,\n                    title: `Input Field ${cnt}`,\n                }\n            })\n        },\n        getInputFields() {\n            return prisma.inputField.findMany({\n                include: {\n                    group: true\n                }\n            })\n        },\n        getInputField(fieldId: number) {\n            return prisma.inputField.findFirst({\n                where: {\n                    id: fieldId\n                }\n            })\n        },\n        updateInputField(fieldId: number, field: InputField) {\n            return prisma.inputField.update({\n                where: {\n                    id: fieldId\n                },\n                data: {\n                    ...field,\n                    id: undefined\n                }\n            })\n        },\n        deleteInputField(fieldId: number) {\n            return prisma.inputField.delete({\n                where: {\n                    id: fieldId\n                }\n            })\n        },\n        generateStructDb() {\n            return prisma.$executeRaw`CALL restructure_db()`\n        },\n    }\n}", "import { PrismaClient } from \"@prisma/client/extension\"\n\nexport default function DocModule(prisma: PrismaClient) {\n    return {\n        async getDoc(sid: number | null, inputForm: any) {\n            let tables: any = {}\n            for (const group of inputForm.groups) {\n                let fields: any = { id: null, sid: null, lst: 0 }\n                for (const field of group.fields) {\n                    fields[`f${field.id}`] = ''\n                }\n                tables[`tbl_${group.id}`] = [{ ...fields }]\n            }\n            let doc = {\n                id: null,\n                isActive: true,\n                startDate: null,\n                endDate: null,\n                createdAt: null,\n                updatedAt: null,\n                createdUserId: null,\n                updatedUserId: null,\n                ...tables,\n            }\n            if (sid) {\n                let result = await prisma.doc.findFirst({\n                    where: {\n                        id: sid,\n                        isActive: true\n                    }\n                })\n                if (result) {\n                    doc.id = result.id\n                    doc.isActive = result.isActive\n                    doc.startDate = result.startDate\n                    doc.endDate = result.endDate\n                    doc.createdAt = result.createdAt\n                    doc.updatedAt = result.updatedAt\n                    doc.createdUserId = result.createdUserId\n                    doc.updatedUserId = result.updatedUserId\n                }\n            }\n            for (const group of inputForm.groups) {\n                const tbl = `tbl_${group.id}`\n                if (doc?.id) {\n                    let sql = 'SELECT id'\n                    for (const field of group.fields) {\n                        const fieldName = `f${field.id}`\n                        switch (field.fieldType) {\n                            case \"DATE\":\n                                sql = sql + `, to_char(${fieldName}, 'DD.MM.YYYY') ${fieldName}`\n                                break\n                            case \"TIME\":\n                                sql = sql + `, to_char(f${fieldName}, 'HH:MI') ${fieldName}`\n                                break\n                            default:\n                                sql = sql + `, ${fieldName}`\n                        }\n                    }\n                    sql = sql + ` FROM ${tbl} WHERE sid = ${sid}`\n                    const data = await prisma.$queryRawUnsafe(`${sql}`)\n                    doc[tbl] = data\n                }\n            }\n            return doc\n        },\n        async createDoc(userId: number | null, inputForm: any, doc: any) {\n            const seq = await prisma.$queryRaw`SELECT nextval('doc_id_seq')`\n            const sid = Number(seq[0].nextval)\n            let tr = []\n            tr.push(\n                prisma.doc.create({\n                    data: {\n                        id: sid,\n                        isActive: true,\n                        dateStart: null,\n                        dateEnd: null,\n                        createdAt: null,\n                        updatedAt: null,\n                        createdUserId: userId,\n                        updatedUserId: null,\n                    }\n                })\n            )\n            for (const group of inputForm.groups) {\n                const tbl = `tbl_${group.id}`\n                for (const rec of doc[tbl]) {\n                    let flds = \"sid\"\n                    let vals = `${sid}`\n                    for (const field of group.fields) {\n                        const fieldName = `f${field.id}`\n                        flds = flds + `, ${fieldName}`\n                        const fieldVal: string = rec[fieldName]\n                        switch (field.fieldType) {\n                            case \"TEXT\":\n                            case \"CYRILLIC\":\n                            case \"DATE\":\n                            case \"TIME\":\n                            case \"FILE\":\n                                vals = vals + `, ${['', '-'].includes(fieldVal) ? 'null' : `'${fieldVal}'`}`\n                                break\n                            default:\n                                vals = vals + `, ${['', '-'].includes(fieldVal) ? 'null' : fieldVal}`\n                                break\n                        }\n                    }\n                    tr.push(prisma.$executeRawUnsafe(`INSERT INTO ${tbl}(${flds}) VALUES(${vals})`))\n                }\n            }\n            return prisma.$transaction(tr)\n        },\n        updateDoc(userId: number | null, inputForm: any, doc: any) {\n            let tr = []\n            tr.push(\n                prisma.doc.update({\n                    where: {\n                        id: doc.id\n                    },\n                    data: {\n                        isActive: true,\n                        dateStart: undefined,\n                        dateEnd: undefined,\n                        createdAt: undefined,\n                        updatedAt: undefined,\n                        createdUserId: undefined,\n                        updatedUserId: userId,\n                    }\n                })\n            )\n            for (const group of inputForm.groups) {\n                const tbl = `tbl_${group.id}`\n                // deleting all rows\n                tr.push(prisma.$executeRawUnsafe(`DELETE FROM ${tbl} WHERE sid=${doc.id}`))\n                // inserting rows\n                for (const rec of doc[tbl]) {\n                    let flds = \"sid\"\n                    let vals = `${doc.id}`\n                    for (const field of group.fields) {\n                        const fieldName = `f${field.id}`\n                        flds = flds + `, ${fieldName}`\n                        const fieldVal: string = rec[fieldName]\n                        switch (field.fieldType) {\n                            case \"TEXT\":\n                            case \"CYRILLIC\":\n                            case \"DATE\":\n                            case \"TIME\":\n                            case \"FILE\":\n                                vals = vals + `, ${['', '-'].includes(fieldVal) ? 'null' : `'${fieldVal}'`}`\n                                break\n                            default:\n                                vals = vals + `, ${['', '-'].includes(fieldVal) ? 'null' : fieldVal}`\n                                break\n                        }\n                    }\n                    tr.push(prisma.$executeRawUnsafe(`INSERT INTO ${tbl}(${flds}) VALUES(${vals})`))\n                }\n            }\n            return prisma.$transaction(tr)\n        },\n        findDoc(inputForm: any, doc: any) {\n            let sf = ''\n            let select = 'SELECT distinct doc.id'\n            let from = ' FROM \"Doc\" doc'\n            let where = ' WHERE doc.\"isActive\" is true'\n            let tbls: string[] = []\n            for (const group of inputForm.groups) {\n                const tbl = `tbl_${group.id}`\n                if (!group.isMulty) {\n                    for (const field of group.fields) {\n                        const fieldName = `f${field.id}`\n                        const fieldVal = doc[tbl][0][fieldName]\n                        if (!['', '-'].includes(fieldVal)) {\n                            if (!tbls.includes(tbl)) {\n                                tbls.push(tbl)\n                                where = where + ` AND doc.id = ${tbl}.sid`\n                                from = from + `, ${tbl}`\n                            }\n                            switch (field.fieldType) {\n                                case \"TEXT\":\n                                case \"CYRILLIC\":\n                                case \"DATE\":\n                                case \"TIME\":\n                                case \"FILE\":\n                                    where = where + ` AND ${fieldName} = '${fieldVal}'`\n                                    break\n                                default:\n                                    where = where + ` AND ${fieldName} = ${fieldVal}`\n                                    break\n                            }\n                        }\n                    }\n                }\n            }\n            sf = select + from + where\n            return prisma.$queryRawUnsafe(`${sf}`)\n        },\n        deleteDoc(sid: number) {\n            return prisma.doc.update({\n                where: {\n                    id: sid\n                },\n                data: {\n                    isActive: false\n                }\n            })\n        },\n    }\n}", "import prisma from \"./instance\"\nimport UsersModule from \"./users\"\nimport DbModule from \"./db\"\nimport DocModule from \"./doc\"\n\nexport default {\n    users: UsersModule(prisma),\n    db: DbModule(prisma),\n    doc: DocModule(prisma),\n}", "import { ReactNode, ButtonHTMLAttributes } from 'react';\n\ninterface CustomButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    className?: string,\n    children?: ReactNode,\n}\n\nexport default function CustomButton({ className, children, ...props }: CustomButtonProps) {\n    return (\n        <button {...props}\n            className={`text-white text-xs py-1.5 px-3.5 flex items-center gap-2 rounded-md hover:cursor-pointer hover:shadow-lg font-semibold uppercase ${className}`}\n        >\n            {children}\n        </button>\n    );\n};\n", "import { ReactNode, InputHTMLAttributes } from 'react';\n\ninterface CustomInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    className?: string,\n    id: string,\n    title?: string,\n    errors?: string,\n    children?: ReactNode,\n}\n\nexport default function CustomInput({ className, id, title, errors, children, ...props }: CustomInputProps) {\n    return (\n        <div\n            className={`${className} p-1 flex items-baseline`}\n        >\n            <label\n                className=\"font-bold text-sm mr-1 min-w-40\"\n                htmlFor={id}\n            >\n                {title}\n            </label>\n            <div className=\"flex flex-col justify-between\">\n                <input\n                    id={id}\n                    className=\"font-mono text-sm border-2 p-1 focus:outline-blue-gray-500\"\n                    {...props}\n                >\n                    {children}\n                </input>\n                <span className=\"text-sm text-red-500 h-4\">{errors}</span>\n            </div>\n        </div>\n    );\n};", "import { ReactNode, SelectHTMLAttributes } from 'react';\n\ninterface CustomSelectProps extends SelectHTMLAttributes<HTMLSelectElement> {\n    className?: string,\n    id: string,\n    title?: string,\n    errors?: string,\n    children?: ReactNode,\n}\n\nexport default function CustomSelect({ className, id, title, errors, children, ...props }: CustomSelectProps) {\n    return (\n        <div\n            className={`${className} p-1 flex items-baseline`}\n        >\n            <label\n                className=\"font-bold text-sm mr-1 min-w-40\"\n                htmlFor={id}\n            >\n                {title}\n            </label>\n            <div className=\"flex flex-col justify-between\">\n                <select\n                    id={id}\n                    className=\"font-mono text-sm border-2 p-1 focus:outline-blue-gray-500 bg-white\"\n                    {...props}\n                >\n                    {children}\n                </select>\n                <span className=\"text-sm text-red-500 h-4\">{errors}</span>\n            </div>\n        </div>\n    );\n};", "import { InputField } from \"@prisma/client\"\nimport { ChangeEvent, Dispatch, SetStateAction } from \"react\"\nimport { IDict } from \"~/types/types\"\nimport CustomInput from \"~/ui/elements/custom_input\"\nimport CustomSelect from \"~/ui/elements/custom_select\"\n\ntype FieldProps = {\n    state: string | null,\n    dictionaries: any,\n    doc: any,\n    setDoc: Dispatch<SetStateAction<any>>,\n    recordIndex: number,\n    fld: InputField\n}\n\nexport default function Field({ state, dictionaries, doc, setDoc, recordIndex, fld }: FieldProps) {\n    const tableName = `tbl_${fld.groupId}`\n    const fieldName = `f${fld.id}`\n    let val = doc[tableName][recordIndex][fieldName] ? doc[tableName][recordIndex][fieldName] : ''\n    const cls = `col-span-${fld.colSpan} col-start-${fld.colStart}`\n    const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        let d = { ...doc }\n        d[tableName][recordIndex][fieldName] = e.target.value\n        setDoc(d)\n    }\n    switch (fld.fieldType) {\n        case \"TEXT\":\n            return (\n                <CustomInput\n                    key={fld.id}\n                    className={cls}\n                    id={fieldName}\n                    title={fld.title}\n                    type=\"text\"\n                    name={fieldName}\n                    value={val}\n                    onChange={handleChange}\n                    required={fld.isRequire && state === 'edit'}\n                    disabled={!fld.isEnable || !(['create', 'edit', 'search', 'find'].includes(String(state)))}\n                    size={fld.len ? fld.len : 30}\n                    maxLength={fld.len ? fld.len : 30}\n                />\n            )\n        case \"CYRILLIC\":\n            return (\n                <CustomInput\n                    key={fld.id}\n                    className={cls}\n                    id={fieldName}\n                    title={fld.title}\n                    type=\"text\"\n                    name={fieldName}\n                    value={val}\n                    onChange={handleChange}\n                    required={fld.isRequire && state === 'edit'}\n                    disabled={!fld.isEnable || !(['create', 'edit', 'search', 'find'].includes(String(state)))}\n                    size={fld.len ? fld.len : 30}\n                    maxLength={fld.len ? fld.len : 30}\n                />\n            )\n        case \"INTEGER\":\n            return (\n                <CustomInput\n                    key={fld.id}\n                    className={cls}\n                    id={fieldName}\n                    title={fld.title}\n                    type=\"number\"\n                    name={fieldName}\n                    value={val}\n                    onChange={handleChange}\n                    required={fld.isRequire && state === 'edit'}\n                    disabled={!fld.isEnable || !(['create', 'edit', 'search', 'find'].includes(String(state)))}\n                    size={fld.len ? fld.len : 30}\n                    maxLength={fld.len ? fld.len : 30}\n                />\n            )\n        case \"NUMERIC\":\n            return (\n                <CustomInput\n                    key={fld.id}\n                    className={cls}\n                    id={fieldName}\n                    title={fld.title}\n                    type=\"number\"\n                    step=\"0.01\"\n                    name={fieldName}\n                    value={val}\n                    onChange={handleChange}\n                    required={fld.isRequire && state === 'edit'}\n                    disabled={!fld.isEnable || !(['create', 'edit', 'search', 'find'].includes(String(state)))}\n                    size={fld.len ? fld.len : 30}\n                    maxLength={fld.len ? fld.len : 30}\n                />\n            )\n        case \"DICT\":\n            const dic = dictionaries.find((item: IDict) => item.id === fld.dicId)\n            return (\n                <CustomSelect\n                    key={fld.id}\n                    className={cls}\n                    id={fieldName}\n                    title={fld.title}\n                    name={fieldName}\n                    value={val}\n                    onChange={handleChange}\n                    required={fld.isRequire && state === 'edit'}\n                    disabled={!fld.isEnable || !(['create', 'edit', 'search', 'find'].includes(String(state)))}\n                >\n                    <option>-</option>\n                    {['create', 'edit', 'search', 'find'].includes(String(state))\n                        ? dic?.data_edit.map((item: any) => (\n                            <option key={item.id} value={item.id}>{item.title}</option>\n                        ))\n                        : dic?.data_browse.map((item: any) => (\n                            <option key={item.id} value={item.id}>{item.title}</option>\n                        ))}\n                </CustomSelect>\n            )\n        case \"DATE\":\n            return (\n                <CustomInput\n                    key={fld.id}\n                    className={cls}\n                    id={fieldName}\n                    title={fld.title}\n                    type=\"date\"\n                    name={fieldName}\n                    value={val}\n                    onChange={handleChange}\n                    required={fld.isRequire && state === 'edit'}\n                    disabled={!fld.isEnable || !(['create', 'edit', 'search', 'find'].includes(String(state)))}\n                    size={fld.len ? fld.len : 30}\n                    maxLength={fld.len ? fld.len : 30}\n                />\n            )\n        case \"TIME\":\n            return (\n                <CustomInput\n                    key={fld.id}\n                    className={cls}\n                    id={fieldName}\n                    title={fld.title}\n                    type=\"time\"\n                    name={fieldName}\n                    value={val}\n                    onChange={handleChange}\n                    required={fld.isRequire && state === 'edit'}\n                    disabled={!fld.isEnable || !(['create', 'edit', 'search', 'find'].includes(String(state)))}\n                    size={fld.len ? fld.len : 30}\n                    maxLength={fld.len ? fld.len : 30}\n                />\n            )\n        // case \"FILE\":\n        //     return (\n        //         <CustomInput\n        //             key={fld.id}\n        //             className={cls}\n        //             id={fieldName}\n        //             title={fld.title}\n        //             type=\"file\"\n        //             name={fieldName}\n        //             defaultValue={defVal}\n        //             required={fld.isRequire && state === 'edit'}\n        //             disabled={!fld.isEnable || !(['create', 'edit', 'search', 'find'].includes(String(state)))}\n        //             size={fld.len ? fld.len : 30}\n        //             maxLength={fld.len ? fld.len : 30}\n        //         />\n        //     )\n    }\n}", "import { InputField } from \"@prisma/client\"\nimport { Dispatch, SetStateAction } from \"react\"\nimport Field from \"./field\"\n\ntype SingleGroupProps = {\n    state: string | null,\n    dictionaries: any,\n    group: any,\n    doc: any,\n    setDoc: Dispatch<SetStateAction<any>>,\n}\nexport default function SingleGroup({ state, dictionaries, group, doc, setDoc }: SingleGroupProps) {\n    return (\n        <div className=\"border p-1 grid grid-cols-3 gap-1\">\n            {group?.fields && group.fields.map((fld: InputField) => (\n                <Field\n                    key={fld.id}\n                    state={state}\n                    dictionaries={dictionaries}\n                    recordIndex={0}\n                    doc={doc}\n                    setDoc={setDoc}\n                    fld={fld}\n                />\n            ))}\n        </div>\n    )\n}", "import { InputField } from \"@prisma/client\"\nimport { Dispatch, MouseEvent, SetStateAction } from \"react\"\nimport Field from \"./field\"\nimport CustomButton from \"~/ui/elements/custom_button\"\n\ntype MultyGroupProps = {\n    state: string | null,\n    dictionaries: any,\n    group: any,\n    doc: any,\n    setDoc: Dispatch<SetStateAction<any>>,\n}\nexport default function MultyGroup({ state, dictionaries, group, doc, setDoc }: MultyGroupProps) {\n    const handleAdd = (e: MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault()\n        let d = { ...doc }\n        const tbl = `tbl_${group.id}`\n        let fields: any = { id: null, sid: null, lst: 0 }\n        for (const field of group.fields) {\n            fields[`f${field.id}`] = ''\n        }\n        d[tbl].push(fields)\n        setDoc(d)\n    }\n\n    const handleDelete = (e: MouseEvent<HTMLButtonElement>, recordIndex: number) => {\n        e.preventDefault()\n        const response = confirm(\n            \"Please confirm you want to delete this record.\"\n        )\n        if (response) {\n            let d = { ...doc }\n            const tbl = `tbl_${group.id}`\n            d[tbl].splice([recordIndex], 1)\n            setDoc(d)\n        }\n    }\n\n    return (\n        <div className=\"border p-1\">\n            <div\n                className=\"flex justify-end p-1\"\n            >\n                {state === 'edit'\n                    ? <CustomButton\n                        className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                        onClick={handleAdd}\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                        </svg>\n                        Add\n                    </CustomButton>\n                    : null}\n            </div>\n            <table\n                className=\"border border-blue-gray-700\"\n            >\n                <thead\n                    className=\"bg-blue-gray-400 text-white text-center\"\n                >\n                    <tr>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">#</th>\n                        {group?.fields && group.fields.map((fld: InputField) => (\n                            <th key={fld.id} className=\"p-1 text-sm border border-blue-gray-700\">\n                                {fld.title}\n                            </th>\n                        ))}\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">#</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {doc[`tbl_${group.id}`].map((record: any, index: number) => (\n                        <tr key={index} >\n                            <td className=\"p-1 text-sm border border-blue-gray-700\">{index + 1}</td>\n                            {group?.fields && group.fields.map((fld: InputField) => (\n                                <td key={fld.id} className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <Field\n                                        state={state}\n                                        dictionaries={dictionaries}\n                                        recordIndex={index}\n                                        doc={doc}\n                                        setDoc={setDoc}\n                                        fld={fld}\n                                    />\n                                </td>\n                            ))}\n                            {state === \"edit\" && index !== 0\n                                ? <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <CustomButton\n                                        className=\"bg-red-500 hover:shadow-red-100\"\n                                        onClick={(e) => handleDelete(e, index)}\n                                    >\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                                        </svg>\n                                        Delete\n                                    </CustomButton>\n                                </td>\n                                : null}\n                        </tr>\n                    ))}\n\n                </tbody>\n            </table>\n        </div>\n    )\n}", "import { Link, useNavigate } from \"@remix-run/react\";\nimport { ChangeEvent, Dispatch, KeyboardEvent, SetStateAction, useState } from \"react\";\n\ntype RecNavigatorProps = {\n    docs: any,\n    current: number,\n    setCurrent: Dispatch<SetStateAction<number>>\n}\n\nexport default function RecNavigator({ docs, current, setCurrent }: RecNavigatorProps) {\n    const [val, setVal] = useState(current)\n    const navigate = useNavigate()\n    const handleFirst = () => {\n        setVal(0)\n        setCurrent(0)\n        navigate(`/dashboard/enter_data/${docs.formId}?docId=${docs.ids[0]}`)\n    }\n    const handlePrev = () => {\n        if (current > 0) {\n            --current\n            setVal(current)\n            setCurrent(current)\n            navigate(`/dashboard/enter_data/${docs.formId}?docId=${docs.ids[current]}`)\n        }\n    }\n    const handleNext = () => {\n        const lastIndex = docs.ids.length - 1\n        if (current < lastIndex) {\n            ++current\n            setVal(current)\n            setCurrent(current)\n            navigate(`/dashboard/enter_data/${docs.formId}?docId=${docs.ids[current]}`)\n        }\n    }\n    const handleLast = () => {\n        const lastIndex = docs.ids.length - 1\n        setVal(lastIndex)\n        setCurrent(lastIndex)\n        navigate(`/dashboard/enter_data/${docs.formId}?docId=${docs.ids[lastIndex]}`)\n    }\n    const handleSeek = (val: number) => {\n        if (val < 0) {\n            val = 0\n        }\n        if (val > docs.ids.length - 1) {\n            val = docs.ids.length - 1\n        }\n        setVal(val)\n        setCurrent(val)\n        navigate(`/dashboard/enter_data/${docs.formId}?docId=${docs.ids[val]}`)\n    }\n    return (\n        <div>\n            {docs && docs.ids\n                ? <div className=\"flex gap-1 justify-end items-center text-xs\">\n                    <p className=\"text-blue-gray-600 font-bold\">\n                        {current + 1} / {docs.ids.length}\n                    </p>\n                    <input\n                        className=\"p-1 text-blue-gray-600 focus:outline-0 w-20\"\n                        type=\"number\"\n                        max={docs.ids.length}\n                        min={1}\n                        value={val + 1}\n                        onChange={(e) => setVal(Number(e.target.value) - 1)}\n\n                    />\n                    <button\n                        className=\"w-20 text-center border bg-blue-gray-500 p-1 font-bold text-white rounded\"\n                        onClick={() => handleSeek(val)}\n                    >\n                        Seek\n                    </button>\n                    <button\n                        className=\"w-8 text-center border bg-orange-700 p-1 font-bold text-white rounded\"\n                        onClick={() => handleFirst()}\n                    >\n                        &lt;&lt;\n                    </button>\n                    <button\n                        className=\"w-8 text-center border bg-orange-700 p-1 font-bold text-white rounded\"\n                        onClick={() => handlePrev()}\n                    >\n                        &lt;\n                    </button>\n                    <button\n                        className=\"w-8 text-center border bg-orange-700 p-1 font-bold text-white rounded\"\n                        onClick={() => handleNext()}\n                    >\n                        &gt;\n                    </button>\n                    <button\n                        className=\"w-8 text-center border bg-orange-700 p-1 font-bold text-white rounded\"\n                        onClick={() => handleLast()}\n                    >\n                        &gt;&gt;\n                    </button>\n                </div>\n                : null}\n        </div>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\"\nconst { Spinner, Alert } = MaterialTailwind\nimport { InputForm, SearchForm, InputField, FieldType, Prisma } from \"@prisma/client\"\nimport { ActionFunctionArgs, LoaderFunctionArgs, json, redirect } from \"@remix-run/node\"\nimport { Form, useActionData, useFetcher, useLoaderData, useOutletContext } from \"@remix-run/react\"\nimport invariant from \"tiny-invariant\"\nimport DictionaryForm from \"~/ui/forms/dict_form\"\nimport GroupForm from \"~/ui/forms/group_form\"\nimport InputFormForm from \"~/ui/forms/input_form\"\nimport SearchFormForm from \"~/ui/forms/search_form\"\nimport DbStrucPanel from \"~/ui/panels/db_struct\"\nimport api from \"~/api\"\nimport { useEffect, useState } from \"react\"\nimport CustomButton from \"~/ui/elements/custom_button\"\nimport { ContexType } from \"./dashboard\"\n\nexport async function loader({\n    request,\n}: LoaderFunctionArgs) {\n    const url = new URL(request.url)\n    const state = url.searchParams.get(\"state\")\n    const inputFormId = url.searchParams.get(\"inputFormId\")\n    const searchFormId = url.searchParams.get(\"searchFormId\")\n    const dictionaryId = url.searchParams.get(\"dictionaryId\")\n    const groupId = url.searchParams.get(\"groupId\")\n    const inputFieldId = url.searchParams.get(\"inputFieldId\")\n    const groups = await api.db.getGroups(Number(inputFormId))\n    const inputFields = await api.db.getInputFields()\n    let inputForm, searchForm, dictionary, group, inputField\n    switch (state) {\n        case 'dictionary': {\n            invariant(dictionaryId, \"Missing dictionaryId param\")\n            dictionary = await api.db.getDictionary(Number(dictionaryId))\n            break\n        }\n        case 'inputForm': {\n            invariant(inputFormId, \"Missing inputFormId param\")\n            inputForm = await api.db.getInputForm(Number(inputFormId))\n            break\n        }\n        case 'searchForm': {\n            invariant(searchFormId, \"Missing searchFormId param\")\n            searchForm = await api.db.getSearchForm(Number(searchFormId))\n            break\n        }\n        case 'group': {\n            invariant(groupId, \"Missing groupId param\")\n            group = await api.db.getGroup(Number(groupId))\n            inputField = group?.fields.find((item: InputField) => { item.id === Number(inputFieldId) })\n            break\n        }\n    }\n    return json({\n        state,\n        dictionary,\n        inputForm,\n        searchForm,\n        group,\n        inputField,\n        groups,\n        inputFields,\n    })\n}\n\nexport async function action({\n    request,\n}: ActionFunctionArgs) {\n    let errors: string | null = null\n    const formData = await request.formData()\n    const { _action, ...values } = Object.fromEntries(formData)\n    if (_action === 'updateInputForm') {\n        try {\n            await api.db.updateInputForm(Number(values.id), {\n                id: Number(values.id),\n                pos: Number(values.pos),\n                title: String(values.title),\n            } as InputForm)\n            return redirect(`/dashboard/db_struct?state=inputForm&inputFormId=${values.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptyInputForm') {\n        try {\n            const form = await api.db.createEmptyInputForm(Number(values.cnt))\n            return redirect(`/dashboard/db_struct?state=inputForm&inputFormId=${form.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteInputForm') {\n        try {\n            await api.db.deleteInputForm(Number(values.id))\n            return redirect(`/dashboard/db_struct`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateSearchForm') {\n        try {\n            await api.db.updateSearchForm(Number(values.id), {\n                id: Number(values.id),\n                pos: Number(values.pos),\n                title: String(values.title),\n            } as SearchForm)\n            return redirect(`/dashboard/db_struct?state=searchForm&searchFormId=${values.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptySearchForm') {\n        try {\n            const form = await api.db.createEmptySearchForm(Number(values.cnt))\n            return redirect(`/dashboard/db_struct?state=searchForm&searchFormId=${form.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteSearchForm') {\n        try {\n            await api.db.deleteSearchForm(Number(values.id))\n            return redirect(`/dashboard/db_struct`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateDictionary') {\n        try {\n            await api.db.updateDictionary(Number(values.id), {\n                id: Number(values.id),\n                title: String(values.title),\n            })\n            return redirect(`/dashboard/db_struct?state=dictionary&dictionaryId=${values.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptyDictionary') {\n        try {\n            const dict = await api.db.createEmptyDictionary(Number(values.cnt))\n            return redirect(`/dashboard/db_struct?state=dictionary&dictionaryId=${dict.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteDictionary') {\n        try {\n            await api.db.deleteDictionary(Number(values.id))\n            return redirect(`/dashboard/db_struct`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptyGroup') {\n        try {\n            const group = await api.db.createEmptyGroup(Number(values.inputFormId), Number(values.cnt))\n            return redirect(`/dashboard/db_struct?state=group&groupId=${group.id}&inputFormId=${group.inputFormId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateGroup') {\n        try {\n            const group = await api.db.updateGroup(Number(values.id),\n                {\n                    id: Number(values.id),\n                    inputFormId: Number(values.inputFormId),\n                    pos: Number(values.pos),\n                    title: String(values.title),\n                    isMulty: Boolean(values.isMulty),\n                },\n            )\n            return redirect(`/dashboard/db_struct?state=group&inputFormId=${group.inputFormId}&groupId=${group.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteGroup') {\n        try {\n            await api.db.deleteGroup(Number(values.id))\n            return redirect('/dashboard/db_struct')\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateInputField') {\n        try {\n            await api.db.updateInputField(Number(values.id), {\n                id: Number(values.id),\n                groupId: Number(values.groupId),\n                colSpan: Number(values.colSpan),\n                colStart: Number(values.colStart),\n                pos: Number(values.pos),\n                title: String(values.title),\n                len: Number(values.len),\n                fieldType: String(values.fieldType) as FieldType,\n                dicId: Number(values.dicId),\n                isKey: Boolean(values.isKey),\n                isVisible: Boolean(values.isVisible),\n                isEnable: Boolean(values.isEnable),\n                isRequire: Boolean(values.isRequire),\n                precision: Number(values.precision),\n                isDuplicate: Boolean(values.isDuplicate),\n            })\n            return redirect(`/dashboard/db_struct?state=group&inputFormId=${values.inputFormId}&groupId=${values.groupId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptyInputField') {\n        try {\n            await api.db.createEmptyInputField(Number(values.groupId), Number(values.cnt))\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteInputField') {\n        try {\n            await api.db.deleteInputField(Number(values.id))\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptySearchField') {\n        try {\n            await api.db.createEmptySearchField(Number(values.searchFormId), Number(values.cnt))\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateSearchField') {\n        try {\n            await api.db.updateSearchField(Number(values.id), {\n                id: Number(values.id),\n                pos: Number(values.pos),\n                searchFormId: Number(values.searchFormId),\n                title: String(values.title),\n                fieldId: Number(values.fieldId),\n            })\n            return redirect(`/dashboard/db_struct?state=searchForm&searchFormId=${values.searchFormId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteSearchField') {\n        try {\n            await api.db.deleteSearchField(Number(values.id))\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'generateStructDb') {\n        try {\n            await api.db.generateStructDb()\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    return json({ errors })\n}\n\nexport default function DbStruct() {\n    const { dictionaries, inputForms, searchForms } = useOutletContext<ContexType>()\n    const [open, setOpen] = useState(false)\n    const {\n        state,\n        dictionary,\n        inputForm,\n        searchForm,\n        group,\n        groups,\n        inputFields\n    } = useLoaderData<typeof loader>()\n    const data = useActionData<typeof action>()\n    const fetcher = useFetcher()\n    const isRestruct = fetcher.state !== \"idle\"\n    const handleRestruct = async (event: any) => {\n        const response = confirm(\n            \"Please confirm you want to restructure database.\"\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    useEffect(() => {\n        if (data?.errors) {\n            setOpen(true)\n        }\n    }, [data])\n\n    return (\n        <div className=\"mx-4 flex flex-col gap-3 h-screen pb-5\">\n            <h1 className=\"self-center text-amber-700 text-3xl font-bold mt-4\">Db Struct</h1>\n            <Alert className=\"text-white bg-red-500\" open={open} onClose={() => setOpen(false)}>\n                {data?.errors ? data.errors : \"\"}\n            </Alert>\n            <div\n                className=\"flex justify-end items-center gap-3 h-14\"\n            >\n                {state === 'dictionary'\n                    ? <Form method=\"post\">\n                        <input type=\"hidden\" name=\"cnt\" defaultValue={dictionaries.length + 1} />\n                        <CustomButton\n                            className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                            type=\"submit\"\n                            name=\"_action\"\n                            value=\"createEmptyDictionary\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                            </svg>\n                            Add Dictionary\n                        </CustomButton>\n                    </Form>\n                    : state === 'inputForm'\n                        ? <Form method=\"post\">\n                            <input type=\"hidden\" name=\"cnt\" defaultValue={inputForms.length + 1} />\n                            <CustomButton\n                                className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                                type=\"submit\"\n                                name=\"_action\"\n                                value=\"createEmptyInputForm\"\n                            >\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                                </svg>\n                                Add InputForm\n                            </CustomButton>\n                        </Form>\n                        : state === 'searchForm'\n                            ? <Form method=\"post\">\n                                <input type=\"hidden\" name=\"cnt\" defaultValue={searchForms.length + 1} />\n                                <CustomButton\n                                    className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                                    type=\"submit\"\n                                    name=\"_action\"\n                                    value=\"createEmptySearchForm\"\n                                >\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                                    </svg>\n                                    Add SearchForm\n                                </CustomButton>\n                            </Form>\n                            : null}\n                <Form method=\"post\">\n                    <CustomButton\n                        className=\"bg-blue-500 hover:shadow-blue-100\"\n                        type=\"submit\"\n                        name=\"_action\"\n                        value=\"generateStructDb\"\n                        disabled={isRestruct}\n                        onClick={handleRestruct}\n                    >\n                        {isRestruct\n                            ? <>\n                                <Spinner className=\"w-4 h-4\" />\n                                Restructuring...\n                            </>\n                            : <>\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M20.25 6.375c0 2.278-3.694 4.125-8.25 4.125S3.75 8.653 3.75 6.375m16.5 0c0-2.278-3.694-4.125-8.25-4.125S3.75 4.097 3.75 6.375m16.5 0v11.25c0 2.278-3.694 4.125-8.25 4.125s-8.25-1.847-8.25-4.125V6.375m16.5 0v3.75m-16.5-3.75v3.75m16.5 0v3.75C20.25 16.153 16.556 18 12 18s-8.25-1.847-8.25-4.125v-3.75m16.5 0c0 2.278-3.694 4.125-8.25 4.125s-8.25-1.847-8.25-4.125\" />\n                                </svg>\n                                Restruct Database\n                            </>}\n                    </CustomButton>\n                </Form>\n            </div>\n            <div className=\"flex flex-row h-full w-full\">\n                <div className=\"bg-white p-4 mr-5 w-1/3 border shadow-blue-gray-700 shadow-md overflow-auto\">\n                    <DbStrucPanel\n                        state={state}\n                        inputForms={inputForms}\n                        searchForms={searchForms}\n                        dictionaries={dictionaries}\n                        groups={groups}\n                        inputFormId={inputForm?.id}\n                        searchFormId={searchForm?.id}\n                        dictionaryId={dictionary?.id}\n                        groupId={group?.id}\n                    />\n                </div>\n                <div className=\"bg-white w-full border p-4 shadow-blue-gray-700 shadow-md overflow-auto\">\n                    {state === 'inputForm' && inputForm\n                        ? <InputFormForm inputForm={inputForm} groups={groups} />\n                        : state === 'searchForm' && searchForm\n                            ? <SearchFormForm searchForm={searchForm} inputFields={inputFields} />\n                            : state === 'dictionary' && dictionary\n                                ? <DictionaryForm dictionary={dictionary} />\n                                : state === 'group' && group\n                                    ? <GroupForm group={group} dicts={dictionaries} />\n                                    : null}\n                </div>\n            </div>\n        </div>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\"\nconst { Spinner } = MaterialTailwind;\nimport { Form, useFetcher } from \"@remix-run/react\"\nimport CustomButton from \"../elements/custom_button\";\nimport CustomInput from \"../elements/custom_input\";\n\ntype DictionaryFormProps = {\n    dictionary: any\n}\n\nexport default function DictionaryForm({ dictionary }: DictionaryFormProps) {\n    const fetcher = useFetcher()\n    const isDeleting = fetcher.state !== \"idle\"\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            \"Please confirm you want to delete this record.\"\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <>\n            <div className=\"flex flex-row gap-3 justify-end\">\n                <CustomButton\n                    className=\"hidden\"\n                    id=\"updateDictionaryButton\"\n                    form=\"updateDictionary\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"updateDictionary\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n                    </svg>\n                    Save\n                </CustomButton>\n                <fetcher.Form method=\"post\">\n                    <input type=\"hidden\" name=\"id\" defaultValue={dictionary.id ? dictionary.id : ''} />\n                    <CustomButton\n                        className=\"bg-red-500 hover:shadow-red-100\"\n                        disabled={isDeleting}\n                        onClick={handleDelete}\n                        type=\"submit\"\n                        name=\"_action\"\n                        value=\"deleteDictionary\"\n                    >\n                        {isDeleting\n                            ? <>\n                                <Spinner className=\"w-4 h-4\" />\n                                Deleting...\n                            </>\n                            : <>\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                                </svg>\n                                Delete\n                            </>}\n                    </CustomButton>\n                </fetcher.Form>\n            </div>\n            <Form\n                id=\"updateDictionary\"\n                key={dictionary?.id}\n                className=\"flex flex-col gap-3\"\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={dictionary.id ? dictionary.id : ''} />\n                <CustomInput\n                    id={dictionary.id}\n                    title=\"Title\"\n                    type=\"text\"\n                    defaultValue={dictionary?.title}\n                    name=\"title\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateDictionaryButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                />\n            </Form >\n            <Form\n                id=\"deleteDictionary\"\n                method=\"post\"\n                onSubmit={(event) => {\n                    const response = confirm(\n                        \"Please confirm you want to delete this record.\"\n                    );\n                    if (!response) {\n                        event.preventDefault();\n                    }\n                }}\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={dictionary.id ? dictionary.id : ''} />\n            </Form>\n        </>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\"\nconst { Spinner } = MaterialTailwind;\nimport { Form, useFetcher, useNavigate } from \"@remix-run/react\"\nimport { InputField, FieldType, Dictionary } from \"@prisma/client\";\nimport CustomButton from \"../elements/custom_button\";\nimport CustomInput from \"../elements/custom_input\";\n\ntype GroupFormProps = {\n    group: any,\n    dicts: any,\n}\n\nexport default function GroupForm({ group, dicts }: GroupFormProps) {\n    const navigate = useNavigate()\n    const fetcher = useFetcher()\n    const isDeleting = fetcher.state !== \"idle\"\n\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            \"Please confirm you want to delete this record.\"\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <>\n            <div className=\"flex flex-row gap-3 justify-end\">\n                <CustomButton\n                    className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                    form=\"addInputFieldForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"createEmptyInputField\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                    </svg>\n                    Add Field\n                </CustomButton>\n                <CustomButton\n                    className=\"hidden\"\n                    id=\"updateGroupButton\"\n                    color=\"green\"\n                    form=\"updateGroupForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"updateGroup\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n                    </svg>\n                    Save\n                </CustomButton>\n                <CustomButton\n                    className=\"bg-red-500 hover:shadow-red-100\"\n                    form=\"deleteGroupForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"deleteGroup\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                    </svg>\n                    Delete\n                </CustomButton>\n            </div>\n            <fetcher.Form\n                id=\"addInputFieldForm\"\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"inputFormId\" defaultValue={group.inputFormId} />\n                <input type=\"hidden\" name=\"groupId\" defaultValue={group.id} />\n                <input type=\"hidden\" name=\"cnt\" defaultValue={group.fields.length + 1} />\n            </fetcher.Form>\n            <Form\n                id=\"updateGroupForm\"\n                className=\"flex flex-col gap-3\"\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={group.id} />\n                <input type=\"hidden\" name=\"inputFormId\" defaultValue={group.inputFormId} />\n\n                <CustomInput\n                    id=\"group_pos\"\n                    type=\"number\"\n                    name=\"pos\"\n                    title=\"Pos: \"\n                    defaultValue={group?.pos}\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateGroupButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                />\n                <CustomInput\n                    id=\"group_title\"\n                    type=\"text\"\n                    name=\"title\"\n                    title=\"Title: \"\n                    defaultValue={group?.title}\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateGroupButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                />\n                <CustomInput\n                    id=\"group_ismulty\"\n                    type=\"checkbox\"\n                    name=\"isMulty\"\n                    title=\"Is Multy: \"\n                    checked={group?.isMulty ? true : false}\n                    required={false}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateGroupButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                />\n            </Form>\n            {group?.fields && group.fields.map((field: InputField) => (\n                <Form\n                    className=\"hidden\"\n                    id={`updateInputFieldForm_${field.id}`}\n                    key={`updateInputFieldForm_${field.id}`}\n                    method=\"post\"\n                >\n                    <input type=\"hidden\" name=\"id\" defaultValue={field.id} />\n                    <input type=\"hidden\" name=\"groupId\" defaultValue={field.groupId} />\n                    <CustomButton\n                        className=\"bg-green-500 hover:shadow-green-100\"\n                        id={`updateInputFieldButton_${field.id}`}\n                        form={`updateInputFieldForm_${field.id}`}\n                        type=\"submit\"\n                        name=\"_action\"\n                        value=\"updateInputField\"\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n                        </svg>\n                        Save\n                    </CustomButton>\n                </Form>\n            ))}\n            <div className=\"overflow-x-auto mt-4\">\n                <table className=\"w-full\">\n                    <thead\n                        className=\"bg-blue-gray-400 text-white text-center\"\n                    >\n                        <tr>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">#</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Pos</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Span</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Start</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Title</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Type</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Dict</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Len</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Precision</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Key</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Visible</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Enable</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Require</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Duplicate</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\"></th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"text-center\">\n                        {group?.fields && group.fields.map((field: InputField, index: number) => (\n                            <tr key={field.id} >\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">{index + 1}</td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-20\">\n                                    <input\n                                        className=\"text-sm w-full\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"number\"\n                                        name=\"pos\"\n                                        defaultValue={field.pos}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-20\">\n                                    <input\n                                        className=\"text-sm w-full\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"number\"\n                                        name=\"colSpan\"\n                                        min={1}\n                                        max={3}\n                                        defaultValue={field.colSpan}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-20\">\n                                    <input\n                                        className=\"text-sm w-full\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"number\"\n                                        name=\"colStart\"\n                                        min={1}\n                                        max={3}\n                                        defaultValue={field.colStart}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td\n                                    className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer hover:underline w-40\"\n                                    onClick={() => navigate(`/db_struct?state=group&groupId=${group.id}&inputFormId=${group.inputFormId}&inputFieldId=${field.id}`)}\n                                >\n                                    <input\n                                        className=\"text-sm w-full\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"text\"\n                                        name=\"title\"\n                                        defaultValue={field.title}\n                                        maxLength={23}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <select\n                                        className=\"text-sm w-full\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        name=\"fieldType\"\n                                        defaultValue={field.fieldType}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    >\n                                        {Object.keys(FieldType).map((key) => <option key={key} value={key}>{key}</option>)}\n                                    </select>\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    {field.fieldType === 'DICT'\n                                        ? <select\n                                            className=\"text-sm w-full\"\n                                            form={`updateInputFieldForm_${field.id}`}\n                                            name=\"dicId\"\n                                            defaultValue={String(field.dicId)}\n                                            onChange={() => {\n                                                const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                                button.click()\n                                            }}\n                                        >\n                                            <option value=\"\">-</option>\n                                            {dicts.map((dic: Dictionary) => <option key={dic.id} value={dic.id}>{dic.title}</option>)}\n                                        </select>\n                                        : null}\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-20\">\n                                    <input\n                                        className=\"text-sm w-full\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"number\"\n                                        name=\"len\"\n                                        defaultValue={field.len}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-20\">\n                                    <input\n                                        className=\"text-sm w-full\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"number\"\n                                        name=\"precision\"\n                                        defaultValue={field.precision}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <input\n                                        className=\"text-sm\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"checkbox\"\n                                        name=\"isKey\"\n                                        defaultChecked={field.isKey}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <input\n                                        className=\"text-sm\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"checkbox\"\n                                        name=\"isVisible\"\n                                        defaultChecked={field.isVisible}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <input\n                                        className=\"text-sm\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"checkbox\"\n                                        name=\"isEnable\"\n                                        defaultChecked={field.isEnable}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <input\n                                        className=\"text-sm\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"checkbox\"\n                                        name=\"isRequire\"\n                                        defaultChecked={field.isRequire}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <input\n                                        className=\"text-sm\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"checkbox\"\n                                        name=\"isDuplicate\"\n                                        defaultChecked={field.isDuplicate}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer\">\n                                    <fetcher.Form method=\"post\">\n                                        <input type=\"hidden\" name=\"id\" defaultValue={field?.id ? field.id : ''} />\n                                        <CustomButton\n                                            className=\"bg-red-500 hover:shadow-red-100\"\n                                            disabled={isDeleting}\n                                            onClick={handleDelete}\n                                            type=\"submit\"\n                                            name=\"_action\"\n                                            value=\"deleteInputField\"\n                                        >\n                                            {isDeleting\n                                                ? <>\n                                                    <Spinner className=\"w-4 h-4\" />\n                                                    Deleting...\n                                                </>\n                                                : <>\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                                                    </svg>\n                                                    Delete\n                                                </>}\n                                        </CustomButton>\n                                    </fetcher.Form>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n            <Form\n                id=\"deleteGroupForm\"\n                method=\"post\"\n                onSubmit={(event) => {\n                    const response = confirm(\n                        \"Please confirm you want to delete this record.\"\n                    );\n                    if (!response) {\n                        event.preventDefault();\n                    }\n                }}\n            >\n                <input type=\"hidden\" name=\"inputFormId\" defaultValue={group.inputFormId} />\n                <input type=\"hidden\" name=\"id\" defaultValue={group.id} />\n            </Form>\n        </>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\"\nconst { Spinner } = MaterialTailwind\nimport { Form } from \"@remix-run/react\"\nimport CustomButton from \"../elements/custom_button\";\nimport CustomInput from \"../elements/custom_input\";\n\ntype InputFormProps = {\n    inputForm: any,\n    groups: any,\n}\n\nexport default function InputFormForm({ inputForm, groups }: InputFormProps) {\n    return (\n        <>\n            <div className=\"flex flex-row gap-3 justify-end\">\n                <CustomButton\n                    className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                    form=\"addGroupForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"createEmptyGroup\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                    </svg>\n                    Add Group\n                </CustomButton>\n                <CustomButton\n                    className=\"hidden\"\n                    id=\"updateInputFormButton\"\n                    form=\"updateInputForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"updateInputForm\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n                    </svg>\n                    Save\n                </CustomButton>\n                <CustomButton\n                    className=\"bg-red-500 hover:shadow-red-100\"\n                    form=\"deleteInputForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"deleteInputForm\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                    </svg>\n                    Delete\n                </CustomButton>\n            </div>\n            <Form\n                id=\"addGroupForm\"\n                key={1}\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"inputFormId\" defaultValue={inputForm.id ? inputForm.id : ''} />\n                <input type=\"hidden\" name=\"cnt\" defaultValue={groups.length + 1} />\n            </Form>\n            <Form\n                id=\"updateInputForm\"\n                key={2}\n                className=\"flex flex-col gap-3\"\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={inputForm.id ? inputForm.id : ''} />\n                <CustomInput\n                    id=\"inputForm_pos\"\n                    title=\"Pos: \"\n                    type=\"number\"\n                    defaultValue={inputForm?.pos}\n                    name=\"pos\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateInputFormButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                />\n                <CustomInput\n                    id=\"inputForm_title\"\n                    title=\"Title: \"\n                    type=\"text\"\n                    defaultValue={inputForm?.title}\n                    name=\"title\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateInputFormButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                />\n            </Form>\n            <Form\n                id=\"deleteInputForm\"\n                key={3}\n                method=\"post\"\n                onSubmit={(event) => {\n                    const response = confirm(\n                        \"Please confirm you want to delete this record.\"\n                    );\n                    if (!response) {\n                        event.preventDefault();\n                    }\n                }}\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={inputForm.id ? inputForm.id : ''} />\n            </Form>\n        </>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\"\nconst { Spinner } = MaterialTailwind;\nimport { Form, useFetcher } from \"@remix-run/react\"\nimport { Group, InputField, SearchField } from \"@prisma/client\";\nimport CustomButton from \"../elements/custom_button\";\nimport CustomInput from \"../elements/custom_input\";\n\ntype SearchFormProps = {\n    searchForm: any,\n    inputFields: any,\n}\nexport default function SearchFormForm({ searchForm, inputFields }: SearchFormProps) {\n    const fetcher = useFetcher()\n    const isDeleting = fetcher.state !== \"idle\"\n\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            \"Please confirm you want to delete this record.\"\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <>\n            <div className=\"flex flex-row gap-3 justify-end\">\n                <CustomButton\n                    className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                    form=\"addSearchFieldForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"createEmptySearchField\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                    </svg>\n                    Add Field\n                </CustomButton>\n                <CustomButton\n                    className=\"hidden\"\n                    id=\"updateSearchFormButton\"\n                    form=\"updateSearchForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"updateSearchForm\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n                    </svg>\n                    Save\n                </CustomButton>\n                <CustomButton\n                    className=\"bg-red-500 hover:shadow-red-100\"\n                    form=\"deleteSearchForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"deleteSearchForm\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                    </svg>\n                    Delete\n                </CustomButton>\n            </div>\n            <fetcher.Form\n                id=\"addSearchFieldForm\"\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"searchFormId\" defaultValue={searchForm.id} />\n                <input type=\"hidden\" name=\"cnt\" defaultValue={searchForm.fields?.length + 1} />\n            </fetcher.Form>\n            <Form\n                id=\"updateSearchForm\"\n                key={searchForm?.id}\n                className=\"flex flex-col gap-3\"\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={searchForm.id} />\n                <CustomInput\n                    id=\"searchForm_pos\"\n                    title=\"Pos: \"\n                    type=\"number\"\n                    value={searchForm?.pos}\n                    name=\"pos\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateSearchFormButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                />\n                <CustomInput\n                    id=\"searchForm_title\"\n                    title=\"Title: \"\n                    type=\"text\"\n                    value={searchForm?.title}\n                    name=\"title\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateSearchFormButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                />\n            </Form>\n            <Form\n                id=\"deleteSearchForm\"\n                method=\"post\"\n                onSubmit={(event) => {\n                    const response = confirm(\n                        \"Please confirm you want to delete this record.\"\n                    );\n                    if (!response) {\n                        event.preventDefault();\n                    }\n                }}\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={searchForm.id ? searchForm.id : ''} />\n            </Form>\n            {searchForm?.fields && searchForm.fields.map((field: SearchField) => (\n                <Form\n                    className=\"hidden\"\n                    id={`updateSearchFieldForm_${field.id}`}\n                    key={`updateSearchFieldForm_${field.id}`}\n                    method=\"post\"\n                >\n                    <input type=\"hidden\" name=\"id\" defaultValue={field.id} />\n                    <input type=\"hidden\" name=\"searchFormId\" defaultValue={field.searchFormId} />\n                    <CustomButton\n                        className=\"bg-green-500 hover:shadow-green-100\"\n                        id={`updateSearchFieldButton_${field.id}`}\n                        form={`updateSearchFieldForm_${field.id}`}\n                        type=\"submit\"\n                        name=\"_action\"\n                        value=\"updateSearchField\"\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n                        </svg>\n                        Save\n                    </CustomButton>\n                </Form>\n            ))}\n            <div className=\"overflow-x-auto mt-4\">\n                <table className=\"w-full\">\n                    <thead\n                        className=\"bg-blue-gray-400 text-white text-center\"\n                    >\n                        <tr>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">#</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Pos</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Title</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\">Field</th>\n                            <th className=\"p-1 text-sm border border-blue-gray-700\"></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {searchForm?.fields && searchForm.fields.map((field: SearchField, index: number) => (\n                            <tr key={field.id} >\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">{index + 1}</td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-20\">\n                                    <input\n                                        className=\"text-sm w-full\"\n                                        form={`updateSearchFieldForm_${field.id}`}\n                                        type=\"number\"\n                                        name=\"pos\"\n                                        defaultValue={field.pos}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateSearchFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td\n                                    className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer hover:underline w-40\"\n                                >\n                                    <input\n                                        className=\"text-sm w-full\"\n                                        form={`updateSearchFieldForm_${field.id}`}\n                                        type=\"text\"\n                                        name=\"title\"\n                                        defaultValue={field.title}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateSearchFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <select\n                                        className=\"text-sm w-full\"\n                                        form={`updateSearchFieldForm_${field.id}`}\n                                        name=\"fieldId\"\n                                        defaultValue={String(field.fieldId)}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateSearchFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    >\n                                        <option value=\"\">-</option>\n                                        {inputFields && inputFields.map(\n                                            (fld: InputField & { group: Group }) =>\n                                                <option key={fld.id} value={fld.id}>\n                                                    {`${fld.group.pos}. ${fld.group.title} -> ${fld.title}`}\n                                                </option>)}\n                                    </select>\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer\">\n                                    <fetcher.Form method=\"post\">\n                                        <input type=\"hidden\" name=\"id\" defaultValue={field.id} />\n                                        <CustomButton\n                                            className=\"bg-red-500 hover:shadow-red-100\"\n                                            disabled={isDeleting}\n                                            onClick={handleDelete}\n                                            type=\"submit\"\n                                            name=\"_action\"\n                                            value=\"deleteSearchField\"\n                                        >\n                                            {isDeleting\n                                                ? <>\n                                                    <Spinner className=\"w-4 h-4\" />\n                                                    Deleting...\n                                                </>\n                                                : <>\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                                                    </svg>\n                                                    Delete\n                                                </>}\n                                        </CustomButton>\n                                    </fetcher.Form>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </>\n    )\n}", "import { Dictionary, Group, InputForm, SearchForm } from \"@prisma/client\"\nimport { Link } from \"@remix-run/react\"\n\ntype DbStructPanelProps = {\n    state: string | null,\n    inputForms: any,\n    searchForms: any,\n    dictionaries: any,\n    groups: any,\n    inputFormId: number | undefined,\n    searchFormId: number | undefined,\n    dictionaryId: number | undefined,\n    groupId: number | undefined,\n}\nexport default function DbStrucPanel({\n    state,\n    inputForms,\n    searchForms,\n    dictionaries,\n    inputFormId,\n    searchFormId,\n    dictionaryId,\n    groupId,\n}: DbStructPanelProps) {\n    return (\n        <ul>\n            <li\n                className={[\"flex items-center gap-1 font-bold\",\n                    state === 'inputForm' && !inputFormId ? \"bg-blue-gray-200\" : \"\"].join(' ')}\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0Z\" />\n                </svg>\n                <Link\n                    to={`/dashboard/db_struct?state=inputForm&inputFormId=0`}\n                >\n                    Input Forms\n                </Link>\n            </li>\n            <ul>\n                {inputForms.map((form: InputForm & { groups: Group[] }) => (\n                    <div key={form.id}>\n                        <Link\n                            to={`/dashboard/db_struct?state=inputForm&inputFormId=${form.id}`}\n                        >\n                            <li\n                                className={[\"pl-4 flex items-center gap-1 hover:cursor-pointer\",\n                                    state === 'inputForm' && form.id === inputFormId ? \"bg-blue-gray-200\" : \"\"].join(' ')}\n                            >\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25\" />\n                                </svg>\n                                {form.pos}. {form.title}\n                            </li>\n                        </Link>\n                        <ul>\n                            {form.groups.map((gr: Group) => (\n                                <Link\n                                    key={gr.id}\n                                    to={`/dashboard/db_struct?state=group&inputFormId=${gr.inputFormId}&groupId=${gr.id}`}\n                                >\n                                    <li\n                                        className={[\"pl-8 flex items-center gap-1 hover:cursor-pointer\",\n                                            state === 'group' && gr.id === groupId ? \"bg-blue-gray-200\" : \"\"].join(' ')}\n                                    >\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25\" />\n                                        </svg>\n                                        {gr.pos}. {gr.title}\n                                    </li>\n                                </Link>\n                            ))}\n                        </ul>\n                    </div>\n                ))}\n            </ul>\n            <li\n                className={[\"flex items-center gap-1 font-bold\",\n                    state === 'searchForm' && !searchFormId ? \"bg-blue-gray-200\" : \"\"].join(' ')}\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0Z\" />\n                </svg>\n                <Link\n                    to={`/dashboard/db_struct?state=searchForm&searchFormId=0`}\n                >\n                    Search Forms\n                </Link>\n            </li>\n            <ul>\n                {searchForms.map((form: SearchForm) => (\n                    <Link\n                        key={form.id}\n                        to={`/dashboard/db_struct?state=searchForm&searchFormId=${form.id}`}\n                    >\n                        <li\n                            className={[\"pl-4 flex items-center gap-1 hover:cursor-pointer\",\n                                state === 'searchForm' && form.id === searchFormId ? \"bg-blue-gray-200\" : \"\"].join(' ')}\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25\" />\n                            </svg>\n                            {form.pos}. {form.title}\n                        </li>\n                    </Link>\n                ))}\n            </ul>\n            <li\n                className={[\"flex items-center gap-1 font-bold\",\n                    state === 'dictionary' && !dictionaryId ? \"bg-blue-gray-200\" : \"\"].join(' ')}\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0Z\" />\n                </svg>\n                <Link\n                    to={`/dashboard/db_struct?state=dictionary&dictionaryId=0`}\n                >\n                    Dictionaries\n                </Link>\n            </li>\n            <ul>\n                {dictionaries.map((dict: Dictionary) => (\n                    <Link\n                        key={dict.id}\n                        to={`/dashboard/db_struct?state=dictionary&dictionaryId=${dict.id}`}\n                    >\n                        <li\n                            className={[\"pl-4 flex items-center gap-1 hover:cursor-pointer\",\n                                state === 'dictionary' && dict.id === dictionaryId ? \"bg-blue-gray-200\" : \"\"].join(' ')}\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25\" />\n                            </svg>\n                            {dict.title}\n                        </li>\n                    </Link>\n                ))}\n            </ul>\n        </ul>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\"\nconst { Spinner } = MaterialTailwind\nimport { Department, Prisma, Role, User } from \"@prisma/client\"\nimport { ActionFunctionArgs, LoaderFunctionArgs, json, redirect } from \"@remix-run/node\"\nimport { useActionData, useFetcher, useLoaderData, useNavigate } from \"@remix-run/react\"\nimport moment from \"moment\"\nimport UserDialog from \"~/ui/dialogs/user_dialog\"\nimport api from \"~/api\"\nimport { useEffect, useState } from \"react\"\nimport CustomButton from \"~/ui/elements/custom_button\"\n\nexport async function loader({\n    request,\n}: LoaderFunctionArgs) {\n    const roles: Role[] = await api.users.getRoles()\n    const departments: Department[] = await api.users.getDepartments()\n    const users = await api.users.getUsers()\n    const url = new URL(request.url)\n    const userId = url.searchParams.get(\"userId\")\n    const isNew = url.searchParams.get(\"new\")\n    let user\n    if (isNew) {\n        user = {}\n    } else if (userId) {\n        user = await api.users.getUser(Number(userId))\n        user = { ...user, password: undefined }\n    }\n    return json({ user, users, roles, departments, isNew })\n}\n\nexport async function action({\n    request,\n}: ActionFunctionArgs) {\n    let errors: string | null = null\n    const formData = await request.formData()\n    const { _action, ...values } = Object.fromEntries(formData)\n    if (_action === 'createUser') {\n        const createUser = {\n            id: Number(values.id),\n            isActive: Boolean(values.isActive),\n            login: String(values.login),\n            password: String(values.password),\n            firstName: String(values.firstName),\n            lastName: String(values.lastName),\n            middleName: String(values.middleName),\n            departmentId: Number(values.departmentId),\n            expiredPwd: new Date(String(values.expiredPwd)),\n            createdAt: null,\n            updatedAt: null,\n        }\n        try {\n            await api.users.createUser(createUser)\n            return redirect(\"/dashboard/users\")\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n            // throw e\n        }\n    }\n    if (_action === 'updateUser') {\n        const userId = Number(values.id)\n        const updateUser = {\n            id: Number(values.id),\n            isActive: Boolean(values.isActive),\n            login: String(values.login),\n            password: String(values.password),\n            firstName: String(values.firstName),\n            lastName: String(values.lastName),\n            middleName: String(values.middleName),\n            departmentId: Number(values.departmentId),\n            expiredPwd: new Date(String(values.expiredPwd)),\n            createdAt: null,\n            updatedAt: null,\n        }\n        try {\n            await api.users.updateUser(userId, updateUser)\n            return redirect(\"/dashboard/users\")\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n            // throw e\n        }\n    }\n    if (_action === 'deleteUser') {\n        const userId = Number(values.id)\n        try {\n            await api.users.deleteUser(userId)\n            return redirect(\"/dashboard/users\")\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n            // throw e\n        }\n    }\n    return json({ errors })\n}\n\nexport default function Users() {\n    const [open, setOpen] = useState(false)\n    const { user, users, roles, departments, isNew } = useLoaderData<typeof loader>()\n    const actionData = useActionData<typeof action>()\n    const navigate = useNavigate()\n    const fetcher = useFetcher()\n    const isDeleting = fetcher.state !== \"idle\"\n\n    useEffect(() => {\n        setOpen(user ? true : false)\n    }, [user])\n\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            \"Please confirm you want to delete this record.\"\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <div className=\"container mx-auto flex flex-col gap-3 h-screen pb-5\">\n            <UserDialog\n                isNew={isNew ? true : false}\n                handleOpen={() => navigate(\"/dashboard/users\")}\n                open={open}\n                user={user ? user as User : null}\n                roles={roles}\n                departments={departments}\n                errors={actionData?.errors}\n            />\n            <h1 className=\"self-center text-amber-700 text-3xl font-bold mt-4\">Users</h1>\n            <div\n                className=\"flex items-center gap-3\"\n            >\n                <CustomButton\n                    className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                    onClick={() => { navigate(\"/dashboard/users?new=true\") }}\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                    </svg>\n                    New User\n                </CustomButton>\n            </div>\n            <table\n                className=\"border-2 border-blue-gray-700\"\n            >\n                <thead\n                    className=\"bg-blue-gray-400 text-white text-center\"\n                >\n                    <tr>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">#</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">IsActive</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">Login</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">First Name</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">Last Name</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">Middle Name</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">Department</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">Expired Password</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">created</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">updated</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">#</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {users.map((user: User, index: number) => (\n                        <tr\n                            key={user.id}\n                        // onClick={() => navigate(`/dashboard/users?userId=${user.id}`)}\n                        >\n                            <td className=\"p-1 text-sm border border-blue-gray-700\">{index + 1}</td>\n                            <td\n                                className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer hover:underline\"\n                                onClick={() => navigate(`/dashboard/users?userId=${user.id}`)}>\n                                {user.isActive ? 'Yes' : 'No'}\n                            </td>\n                            <td\n                                className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer hover:underline\"\n                                onClick={() => navigate(`/dashboard/users?userId=${user.id}`)}\n                            >\n                                {user.login}\n                            </td>\n                            <td\n                                className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer hover:underline\"\n                                onClick={() => navigate(`/dashboard/users?userId=${user.id}`)}\n                            >\n                                {user.firstName}\n                            </td>\n                            <td\n                                className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer hover:underline\"\n                                onClick={() => navigate(`/dashboard/users?userId=${user.id}`)}\n                            >\n                                {user.lastName}\n                            </td>\n                            <td\n                                className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer hover:underline\"\n                                onClick={() => navigate(`/dashboard/users?userId=${user.id}`)}\n                            >\n                                {user.middleName}\n                            </td>\n                            <td className=\"p-1 text-sm border border-blue-gray-700\">{departments.find(item => item.id === user.departmentId)?.title}</td>\n                            <td className=\"p-1 text-sm border border-blue-gray-700\">{moment(user.expiredPwd).format('DD.MM.YYYY')}</td>\n                            <td className=\"p-1 text-sm border border-blue-gray-700\">{moment(user.createdAt).format('DD.MM.YYYY H:m:s')}</td>\n                            <td className=\"p-1 text-sm border border-blue-gray-700\">{moment(user.updatedAt).format('DD.MM.YYYY H:m:s')}</td>\n                            <td className=\"p-1 text-sm border border-blue-gray-700 flex justify-center\">\n                                <fetcher.Form method=\"post\">\n                                    <input type=\"hidden\" name=\"id\" defaultValue={user?.id ? user.id : ''} />\n                                    <CustomButton\n                                        className=\"bg-red-500 hover:shadow-red-100\"\n                                        disabled={isDeleting}\n                                        onClick={handleDelete}\n                                        type=\"submit\"\n                                        name=\"_action\"\n                                        value=\"deleteUser\"\n                                    >\n                                        {isDeleting\n                                            ? <>\n                                                <Spinner className=\"w-4 h-4\" />\n                                                Deleting...\n                                            </>\n                                            : <>\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                                                </svg>\n                                                Delete\n                                            </>}\n                                    </CustomButton>\n                                </fetcher.Form>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\";\nimport { Department, User, Role } from \"@prisma/client\";\nimport { Form } from \"@remix-run/react\";\nimport moment from \"moment\";\nimport CustomInput from \"../elements/custom_input\";\nimport CustomSelect from \"../elements/custom_select\";\nimport CustomButton from \"../elements/custom_button\";\nconst { Dialog, Card, CardBody, CardFooter } = MaterialTailwind;\n\ntype UserDialogProps = {\n    isNew: boolean\n    handleOpen: () => void\n    open: boolean,\n    user: User | null,\n    roles: Role[],\n    departments: Department[],\n    errors: string | null | undefined\n}\n\nexport default function UserDialog({ isNew, handleOpen, open, user, roles, departments, errors }: UserDialogProps) {\n    return (\n        <Dialog\n            placeholder=\"\"\n            size=\"sm\"\n            open={open}\n            handler={handleOpen}\n            className=\"bg-transparent shadow-none\"\n        >\n            <Card className=\"mx-auto w-full\" placeholder=\"\">\n                <CardBody className=\"flex flex-col gap-4 overflow-auto\" placeholder=\"\">\n                    <Form\n                        id=\"userForm\"\n                        key={user?.id}\n                        className=\"flex flex-col gap-3\"\n                        method=\"post\"\n                    >\n                        <input type=\"hidden\" name=\"id\" defaultValue={user?.id ? user.id : ''} />\n                        <CustomInput\n                            id=\"user_is_active\"\n                            type=\"checkbox\"\n                            name=\"isActive\"\n                            title=\"is Active: \"\n                            defaultChecked={user?.isActive}\n                        />\n                        <CustomInput\n                            id=\"user_login\"\n                            type=\"text\"\n                            name=\"login\"\n                            title=\"Login: \"\n                            defaultValue={user?.login}\n                            required={true}\n                            readOnly={!isNew}\n                        />\n                        <CustomInput\n                            id=\"user_password\"\n                            type=\"password\"\n                            name=\"password\"\n                            title=\"Password: \"\n                            defaultValue={user?.password}\n                            required={false}\n                        />\n                        <CustomInput\n                            id=\"user_firsName\"\n                            type=\"text\"\n                            name=\"firstName\"\n                            title=\"First Name: \"\n                            defaultValue={user?.firstName ? user.firstName : \"\"}\n                            required={false}\n                        />\n                        <CustomInput\n                            id=\"user_lastName\"\n                            type=\"text\"\n                            name=\"lastName\"\n                            title=\"Last Name: \"\n                            defaultValue={user?.lastName ? user.lastName : \"\"}\n                            required={false}\n                        />\n                        <CustomInput\n                            id=\"user_middleName\"\n                            type=\"text\"\n                            name=\"middleName\"\n                            title=\"Middle Name: \"\n                            defaultValue={user?.middleName ? user.middleName : \"\"}\n                            required={false}\n                        />\n                        <CustomSelect\n                            id=\"user_department\"\n                            name=\"departmentId\"\n                            title=\"Department: \"\n                            defaultValue={user?.departmentId ? user.departmentId : \"\"}\n                            required={false}\n                        >\n                            <option>-</option>\n                            {departments.map(item => (\n                                <option value={item.id}>{item.title}</option>\n                            ))}\n                        </CustomSelect>\n                        <CustomInput\n                            id=\"user_expiredPwd\"\n                            type=\"date\"\n                            name=\"expiredPwd\"\n                            title=\"Expired Password: \"\n                            defaultValue={moment(user?.expiredPwd).format(\"YYYY-MM-DD\")}\n                            required={true}\n                        />\n                    </Form>\n                    <span className=\"text-red-500 text-sm\">{errors}</span>\n                </CardBody>\n                <CardFooter className=\"pt-0 flex flex-row gap-3\" placeholder=\"\">\n                    <CustomButton\n                        className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                        form=\"userForm\"\n                        type=\"submit\"\n                        name=\"_action\"\n                        value={isNew ? \"createUser\" : \"updateUser\"}\n                    >\n                        Save\n                    </CustomButton>\n                    <CustomButton\n                        className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n                        onClick={handleOpen}\n                    >\n                        Close\n                    </CustomButton>\n                </CardFooter>\n            </Card>\n        </Dialog>\n    )\n}", "import { InputForm, SearchForm } from \"@prisma/client\";\nimport { Link, Outlet, json, useLoaderData, useNavigate } from \"@remix-run/react\";\nimport { Dispatch, SetStateAction, useState } from \"react\";\nimport api from \"~/api\";\n\nexport type ContexType = {\n    dictionaries?: any,\n    inputForms?: any,\n    searchForms?: any,\n    docs: { formId?: number, ids?: number[] },\n    setDocs: Dispatch<SetStateAction<{ formId?: number, ids?: number[] }>>,\n    current: number,\n    setCurrent: Dispatch<SetStateAction<number>>,\n}\n\nexport async function loader() {\n    const dictionaries = await api.db.getDictionaries()\n    const inputForms = await api.db.getInputForms()\n    const searchForms = await api.db.getSearchForms()\n    return json({\n        dictionaries,\n        inputForms,\n        searchForms\n    })\n}\n\nexport default function dashboard() {\n    const [docs, setDocs] = useState<{ formId?: number, ids?: number[] }>({})\n    const [current, setCurrent] = useState(0)\n    const data = useLoaderData<typeof loader>()\n    const context: ContexType = {\n        ...data,\n        docs,\n        setDocs,\n        current,\n        setCurrent\n    }\n\n\n    return (\n        <div className=\"container mx-auto flex flex-col gap-3 h-screen pb-5\">\n\n            <h1 className=\"text-3xl text-amber-700 font-bold\">DbClient</h1>\n            <ul className=\"text-blue-500 text-bold\">\n                <li>\n                    Enter Data\n                    <ul className=\"ml-4\">\n                        {data.inputForms.map((item: InputForm) =>\n                            <li key={item.id}><Link to={`/dashboard/enter_data/${item.id}`}>\n                                Form: {item.title}\n                            </Link></li>)}\n                    </ul>\n                </li>\n                <li>\n                    Search Data\n                    <ul className=\"ml-4\">\n                        {data.searchForms.map((item: SearchForm) =>\n                            <li key={item.id}><Link to={`/dashboard/search_data/${item.id}`}>\n                                Form: {item.title}\n                            </Link></li>)}\n                    </ul>\n                </li>\n                <li>\n                    Service\n                    <ul className=\"ml-4\">\n                        <li><Link to=\"db_struct\">Db Structure</Link></li>\n                        <li><Link to=\"users\">Users</Link></li>\n                    </ul>\n                </li>\n                <li>Help</li>\n            </ul>\n            <Outlet context={context} />\n        </div>\n    )\n}", "import type { MetaFunction } from \"@remix-run/node\";\nimport { Link } from \"@remix-run/react\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"New Remix App\" },\n    { name: \"description\", content: \"Welcome to Remix!\" },\n  ];\n};\n\n\n\nexport default function Index() {\n  return (\n    <div>\n      <Link to=\"/dashboard\">Dashboard</Link>\n    </div>\n  );\n}\n", "export default {'entry':{'module':'/build/entry.client-6WOD7NPS.js','imports':['/build/_shared/chunk-OAPPX4FA.js','/build/_shared/chunk-DGLILCEK.js','/build/_shared/chunk-TJ4YKIVD.js','/build/_shared/chunk-Q6LMBPEP.js','/build/_shared/chunk-JR22VO6P.js','/build/_shared/chunk-WEAPBHQG.js','/build/_shared/chunk-7PHB3BFD.js','/build/_shared/chunk-CJ4MY3PQ.js','/build/_shared/chunk-PZDJHGND.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-I6FD4XA6.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-WDIKY46K.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/dashboard':{'id':'routes/dashboard','parentId':'root','path':'dashboard','index':undefined,'caseSensitive':undefined,'module':'/build/routes/dashboard-2DOKIGSS.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/dashboard.db_struct':{'id':'routes/dashboard.db_struct','parentId':'routes/dashboard','path':'db_struct','index':undefined,'caseSensitive':undefined,'module':'/build/routes/dashboard.db_struct-2RJ2BBLC.js','imports':['/build/_shared/chunk-CCQ6AUXW.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/dashboard.enter_data.$formId':{'id':'routes/dashboard.enter_data.$formId','parentId':'routes/dashboard','path':'enter_data/:formId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/dashboard.enter_data.$formId-ME2Q5EMW.js','imports':['/build/_shared/chunk-ZPTKG4AS.js','/build/_shared/chunk-CCQ6AUXW.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/dashboard.users':{'id':'routes/dashboard.users','parentId':'routes/dashboard','path':'users','index':undefined,'caseSensitive':undefined,'module':'/build/routes/dashboard.users-YOVRUVA6.js','imports':['/build/_shared/chunk-ZPTKG4AS.js','/build/_shared/chunk-CCQ6AUXW.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'16b9efb9','hmr':{'runtime':'/build/_shared/chunk-Q6LMBPEP.js','timestamp':1708944139814},'url':'/build/manifest-16B9EFB9.js'};", "\nimport * as entryServer from \"/home/kairat/my_projects/DbClient/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/dashboard.enter_data.$formId.tsx\";\nimport * as route2 from \"./routes/dashboard.db_struct.tsx\";\nimport * as route3 from \"./routes/dashboard.users.tsx\";\nimport * as route4 from \"./routes/dashboard.tsx\";\nimport * as route5 from \"./routes/_index.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":false,\"v3_relativeSplatPath\":false,\"v3_throwAbortReason\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/dashboard.enter_data.$formId\": {\n      id: \"routes/dashboard.enter_data.$formId\",\n      parentId: \"routes/dashboard\",\n      path: \"enter_data/:formId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/dashboard.db_struct\": {\n      id: \"routes/dashboard.db_struct\",\n      parentId: \"routes/dashboard\",\n      path: \"db_struct\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/dashboard.users\": {\n      id: \"routes/dashboard.users\",\n      parentId: \"routes/dashboard\",\n      path: \"users\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/dashboard\": {\n      id: \"routes/dashboard\",\n      parentId: \"root\",\n      path: \"dashboard\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route5\n    }\n  };"],
  "mappings": "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",
  "names": ["jsxDEV", "useNavigate", "useState", "prisma", "prisma", "prisma", "jsxDEV", "jsxDEV", "jsxDEV", "jsxDEV", "jsxDEV", "jsxDEV", "jsxDEV", "val", "jsxDEV", "document", "useState", "useNavigate", "action", "loader", "MaterialTailwind", "Prisma", "json", "redirect", "Form", "useActionData", "useFetcher", "useLoaderData", "useOutletContext", "MaterialTailwind", "Form", "useFetcher", "Fragment", "jsxDEV", "Spinner", "MaterialTailwind", "useFetcher", "Form", "MaterialTailwind", "Form", "useFetcher", "useNavigate", "Fragment", "jsxDEV", "Spinner", "MaterialTailwind", "useNavigate", "useFetcher", "Form", "MaterialTailwind", "Form", "Fragment", "jsxDEV", "Spinner", "MaterialTailwind", "Form", "MaterialTailwind", "Form", "useFetcher", "Fragment", "jsxDEV", "Spinner", "MaterialTailwind", "useFetcher", "Form", "Link", "jsxDEV", "useEffect", "useState", "Fragment", "jsxDEV", "Spinner", "Alert", "MaterialTailwind", "loader", "json", "action", "redirect", "Prisma", "useOutletContext", "useState", "useLoaderData", "useActionData", "useFetcher", "useEffect", "Form", "action", "loader", "MaterialTailwind", "Prisma", "json", "redirect", "useActionData", "useFetcher", "useLoaderData", "useNavigate", "moment", "MaterialTailwind", "Form", "jsxDEV", "Dialog", "Card", "CardBody", "CardFooter", "MaterialTailwind", "Form", "useEffect", "useState", "Fragment", "jsxDEV", "Spinner", "MaterialTailwind", "loader", "json", "action", "redirect", "Prisma", "useState", "useLoaderData", "useActionData", "useNavigate", "useFetcher", "useEffect", "user", "moment", "loader", "Link", "Outlet", "json", "useLoaderData", "useState", "jsxDEV", "loader", "json", "useState", "useLoaderData", "Link", "Outlet", "Link", "jsxDEV"]
}
