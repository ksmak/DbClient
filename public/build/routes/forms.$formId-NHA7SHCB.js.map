{
  "version": 3,
  "sources": ["../../../app/routes/forms.$formId.tsx", "../../../app/ui/elements/form_input.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/forms.$formId.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/forms.$formId.tsx\");\n  import.meta.hot.lastModified = \"1708519467034.0286\";\n}\n// REMIX HMR END\n\nimport MaterialTailwind from \"@material-tailwind/react\";\nconst {\n  Alert,\n  Button\n} = MaterialTailwind;\nimport { Prisma } from \"@prisma/client\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\nimport api from '~/api';\nimport FormInput from \"~/ui/elements/form_input\";\nexport async function loader({\n  request,\n  params\n}) {\n  const url = new URL(request.url);\n  const state = url.searchParams.get(\"state\");\n  const isNew = url.searchParams.get(\"isNew\");\n  let dicts = [];\n  let inputForm;\n  let errors = null;\n  let doc;\n  const dictionaries = await api.db.getDictionaries();\n  for (const dict of dictionaries) {\n    const data = await api.forms.getDic(dict.id, Boolean(state === 'edit'));\n    dicts.push({\n      dictId: dict.id,\n      data: data\n    });\n  }\n  try {\n    inputForm = await api.db.getInputForm(Number(params.formId));\n    for (const field of inputForm.fields) {\n      doc[`f${field.id}`] = null;\n    }\n  } catch (e) {\n    if (e instanceof Prisma.PrismaClientKnownRequestError) {\n      errors = e.message;\n    }\n  }\n  // if (isNew === 'true') {\n  //     doc = {}\n  // }\n  return json({\n    state,\n    inputForm,\n    errors,\n    dicts,\n    doc\n  });\n}\nexport async function action({\n  request\n}) {\n  let errors = null;\n  const formData = await request.formData();\n  const {\n    _action,\n    ...values\n  } = Object.fromEntries(formData);\n  if (_action === 'createDoc') {\n    return redirect(`/forms/${values.formId}?state=edit&isNew=true`);\n  }\n}\nexport default function Forms() {\n  _s();\n  const [open, setOpen] = useState(false);\n  const {\n    state,\n    inputForm,\n    errors,\n    dicts,\n    doc\n  } = useLoaderData();\n  useEffect(() => {\n    if (errors) {\n      setOpen(true);\n    }\n  }, [errors]);\n  return <div className=\"container mx-auto flex flex-col gap-3 h-screen pb-5\">\n            <h1 className=\"self-center text-amber-700 text-3xl font-bold mt-4\">{inputForm?.title}</h1>\n            <Alert className=\"text-white bg-red-500\" open={open} onClose={() => setOpen(false)}>\n                {errors ? errors : \"\"}\n            </Alert>\n            <div className=\"flex items-center gap-3\">\n                <Form method=\"post\">\n                    <input type=\"hidden\" name=\"formId\" value={inputForm.id} />\n                    <Button className=\"flex items-center gap-3\" color=\"blue-gray\" placeholder='' size=\"sm\" type=\"submit\" name=\"_action\" value=\"createDoc\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                        </svg>\n                        Create\n                    </Button>\n                </Form>\n            </div>\n            <div className=\"bg-white w-full border p-1 shadow-blue-gray-700 shadow-md overflow-auto\">\n                <Form id=\"editDocument\">\n                    {inputForm?.groups && inputForm.groups.map(group => <div key={group.id}>\n                            <h2 className=\"bg-orange-700 text-white font-bold text-sm p-1 pl-4\">{group.title}</h2>\n                            <div className=\"border border-blue-gray p-2 mb-2 grid grid-cols-3\">\n                                {group?.fields && group.fields.map(fld => {\n              const fieldName = `f${fld.id}`;\n              const cls = `col-span-${fld.colSpan} col-start-${fld.colStart}`;\n              switch (fld.fieldType) {\n                case \"TEXT\":\n                  return <FormInput key={fld.id} cls={cls} fieldName={fieldName} fieldType=\"text\" title={fld.title} value={doc[fieldName]} required={fld.isRequire} disabled={!fld.isEnable || state !== 'edit'} size={fld.len ? fld.len : 30} maxLength={fld.len ? fld.len : 30} />;\n                case \"CYRILLIC\":\n                  return <FormInput key={fld.id} cls={cls} fieldName={fieldName} fieldType=\"text\" title={fld.title} value={doc[fieldName]} required={fld.isRequire} disabled={!fld.isEnable || state !== 'edit'} size={fld.len ? fld.len : 30} maxLength={fld.len ? fld.len : 30} />;\n                case \"INTEGER\":\n                  return <FormInput key={fld.id} cls={cls} fieldName={fieldName} fieldType=\"number\" title={fld.title} value={doc[fieldName]} required={fld.isRequire} disabled={!fld.isEnable || state !== 'edit'} size={fld.len ? fld.len : 30} maxLength={fld.len ? fld.len : 30} />;\n                case \"NUMERIC\":\n                  return <FormInput key={fld.id} cls={cls} fieldName={fieldName} fieldType=\"number\" step=\"0.01\" title={fld.title} value={doc[fieldName]} required={fld.isRequire} disabled={!fld.isEnable || state !== 'edit'} size={fld.len ? fld.len : 30} maxLength={fld.len ? fld.len : 30} />;\n                case \"DICT\":\n                  const dic = dicts.find(item => item.dictId === fld.dicId);\n                  return <FormInput key={fld.id} cls={cls} fieldName={fieldName} fieldType=\"number\" step=\"0.01\" title={fld.title} value={doc[fieldName]} required={fld.isRequire} disabled={!fld.isEnable || state !== 'edit'} size={fld.len ? fld.len : 30} maxLength={fld.len ? fld.len : 30} isSelect={true} options={dic} />;\n                case \"DATE\":\n                  return <FormInput key={fld.id} cls={cls} fieldName={fieldName} fieldType=\"date\" title={fld.title} value={doc[fieldName]} required={fld.isRequire} disabled={!fld.isEnable || state !== 'edit'} size={fld.len ? fld.len : 30} maxLength={fld.len ? fld.len : 30} />;\n                case \"TIME\":\n                  return <FormInput key={fld.id} cls={cls} fieldName={fieldName} fieldType=\"time\" title={fld.title} value={doc[fieldName]} required={fld.isRequire} disabled={!fld.isEnable || state !== 'edit'} size={fld.len ? fld.len : 30} maxLength={fld.len ? fld.len : 30} />;\n                case \"FILE\":\n                  return <FormInput key={fld.id} cls={cls} fieldName={fieldName} fieldType=\"file\" title={fld.title} value={doc[fieldName]} required={fld.isRequire} disabled={!fld.isEnable || state !== 'edit'} size={fld.len ? fld.len : 30} maxLength={fld.len ? fld.len : 30} />;\n              }\n            })}\n                            </div>\n                        </div>)}\n                </Form>\n            </div>\n        </div>;\n}\n_s(Forms, \"ebQHrl+byEfPJ4GMBKDuRXimgkw=\", false, function () {\n  return [useLoaderData];\n});\n_c = Forms;\nvar _c;\n$RefreshReg$(_c, \"Forms\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/ui/elements/form_input.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/ui/elements/form_input.tsx\");\n  import.meta.hot.lastModified = \"1708517954902.7751\";\n}\n// REMIX HMR END\n\nexport default function FormInput({\n  cls,\n  fieldType,\n  fieldName,\n  title,\n  value,\n  required,\n  disabled,\n  size,\n  maxLength,\n  step,\n  isSelect = false,\n  options\n}) {\n  return <div className={`p-1 flex items-baseline ${cls}`}>\n            <label className=\"font-bold text-sm mr-1 min-w-40\" htmlFor={fieldName}>\n                {title}\n            </label>\n            <div className=\"flex flex-col justify-between\">\n                {isSelect ? <select className=\"font-mono text-sm border-2 p-1 focus:outline-blue-gray-500 bg-white\" id={fieldName} name={fieldName} defaultValue={value} required={required} disabled={disabled}>\n                        <option>-</option>\n                        {options?.data.map(item => <option key={item.id} value={item.id}>{item.title}</option>)}\n                    </select> : <input className=\"font-mono text-sm border-2 p-1 focus:outline-blue-gray-500\" id={fieldName} type={fieldType} name={fieldName} defaultValue={value} required={required} disabled={disabled} size={size} maxLength={maxLength} step={step} />}\n                <span className=\"text-sm text-red-500 h-4\"></span>\n            </div>\n        </div>;\n}\n_c = FormInput;\nvar _c;\n$RefreshReg$(_c, \"FormInput\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "MaterialTailwind", "_c"]
}
