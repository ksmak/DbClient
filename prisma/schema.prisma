// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id           Int            @id @default(autoincrement())
  title        String         @unique
  users        User[]
}

model Role {
  id           Int            @id @default(autoincrement())
  title        String         @unique
  accessInput  AccessInputForm[]
  accessSearch AccessSearchForm[]
  userRoles    UserRole[]
}

enum AccessType {
  READ
  WRITE
  DELETE
}

model AccessInputForm {
  id           Int            @id @default(autoincrement())
  role         Role           @relation(fields: [roleId], references: [id])
  roleId       Int
  form         InputForm      @relation(fields: [formId], references: [id])
  formId       Int
  accessType   AccessType     @default(READ)
}

model AccessSearchForm {
  id           Int            @id @default(autoincrement())
  role         Role           @relation(fields: [roleId], references: [id])
  roleId       Int
  form         SearchForm     @relation(fields: [formId], references: [id])
  formId       Int
  accessType   AccessType     @default(READ)
}

model UserRole {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  role         Role           @relation(fields: [roleId], references: [id])
  roleId       Int
}

model User {
  id           Int            @id @default(autoincrement())
  login        String         @unique
  password     String
  firstName    String?
  lastName     String?
  middleName   String?
  department   Department?    @relation(fields: [departmentId], references: [id])
  departmentId Int?
  expiredPwd   DateTime?
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt
  roles        UserRole[]
  queries      Query[]
}

model Dictionary {
  id           Int            @id @default(autoincrement())
  title        String
}

model InputForm {
  id           Int            @id @default(autoincrement())
  pos          Int            @default(0)
  title        String
  groups       Group[]
  access       AccessInputForm[]
}

model SearchForm {
  id           Int            @id @default(autoincrement())
  pos          Int            @default(0)
  title        String
  fields       SearchField[]
  access       AccessSearchForm[]
}

model Group {
  id           Int            @id @default(autoincrement())
  pos          Int            @default(0)
  title        String
  inputForm    InputForm      @relation(fields: [inputFormId], references: [id])
  inputFormId  Int
  isMulty      Boolean        @default(false)
  fields       InputField[]
}

enum FieldType {
  TEXT
  CYRILLIC
  INTEGER
  DICT
}

model InputField {
  id           Int            @id @default(autoincrement())
  pos          Int            @default(0)
  title        String
  group        Group          @relation(fields: [groupId], references: [id])
  groupId      Int
  filedType    FieldType      @default(TEXT)
  len          Int            @default(0)
  isKey        Boolean        @default(false)
  isVisible    Boolean        @default(true)
  isEnable     Boolean        @default(true)
  isRequire    Boolean        @default(false)
  precision    Int            @default(0)
  isDuplicate  Boolean        @default(false)
  searchField  SearchField[]
  conditions   Condition[]
}

model SearchField {
  id           Int            @id @default(autoincrement())
  pos          Int            @default(0)
  title        String
  searchForm   SearchForm     @relation(fields: [searchFormId], references: [id])
  searchFormId Int
  field        InputField     @relation(fields: [fieldId], references: [id])
  fieldId      Int
}

model Report {
  id           Int            @id @default(autoincrement())
  pos          Int            @default(0)
  title        String
  template     String
  start_row    Int            @default(1)
  start_col    Int            @default(1)
  cols         ReportCol[]
}

model ReportCol {
  id           Int            @id @default(autoincrement())
  pos          Int            @default(1)
  report       Report         @relation(fields: [reportId], references: [id])
  reportId     Int
  query        Query          @relation(fields: [queryId], references: [id])
  queryId      Int
  rows         ReportRow[]
}

model ReportRow {
  id           Int            @id @default(autoincrement())
  pos          Int            @default(1)
  col          ReportCol      @relation(fields: [colId], references: [id])
  colId        Int
  query        Query          @relation(fields: [queryId], references: [id])
  queryId      Int
}

model Query {
  id           Int            @id @default(autoincrement())
  title        String?
  user         User?          @relation(fields: [userId], references: [id])
  userId       Int?
  isPublic     Boolean        @default(false)
  cols         ReportCol[]
  rows         ReportRow[]
  conditions   Condition[]
}

model Condition {
  id           Int            @id @default(autoincrement())
  query        Query          @relation(fields: [queryId], references: [id])
  queryId      Int
  log          String?
  field        InputField?    @relation(fields: [fieldId], references: [id])
  fieldId      Int?
  oper         String?
  valList      ValList[]
}

model ValList {
  id           Int            @id @default(autoincrement())
  cond         Condition      @relation(fields: [condId], references: [id])
  condId       Int
  value        String
}